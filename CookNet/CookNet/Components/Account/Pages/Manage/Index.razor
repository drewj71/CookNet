@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CookNet.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JSRuntime
@inject RecipeService RecipeService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post" enctype="multipart/form-data">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputDate id="date-of-birth" @bind-Value="Input.DateOfBirth" class="form-control" />
                <label for="phone-number" class="form-label">Date of birth</label>
                <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.DisplayName" class="form-control" placeholder="Please enter your full name." />
                <label for="full-name" class="form-label">Display name</label>
                <ValidationMessage For="() => Input.DisplayName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Location" class="form-control" placeholder="Please enter your location." />
                <label for="location" class="form-label">Location</label>
                <ValidationMessage For="() => Input.Location" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Biography" class="form-control" placeholder="Please enter your bio." />
                <label for="biography" class="form-label">Biography</label>
                <ValidationMessage For="() => Input.Biography" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.SocialMediaLinks" class="form-control" placeholder="Please enter your social media links." />
                <label for="social-media-links" class="form-label">Social Media Links</label>
                <ValidationMessage For="() => Input.SocialMediaLinks" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (user == null)
        {
            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            username = await UserManager.GetUserNameAsync(user);
            phoneNumber = await UserManager.GetPhoneNumberAsync(user);

            Input.PhoneNumber = phoneNumber ?? Input.PhoneNumber;
            Input.DateOfBirth = user.DateOfBirth ?? Input.DateOfBirth;
            Input.DisplayName = user.DisplayName ?? Input.DisplayName;
            Input.Location = user.Location ?? Input.Location;
            Input.Biography = user.Biography ?? Input.Biography;
            Input.SocialMediaLinks = user.SocialMediaLinks ?? Input.SocialMediaLinks;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        user.PhoneNumber = Input.PhoneNumber;
        user.DateOfBirth = Input.DateOfBirth;
        user.DisplayName = Input.DisplayName;
        user.ProfilePictureBase64 = Input.ProfilePictureBase64;
        user.Location = Input.Location;
        user.Biography = Input.Biography;
        user.SocialMediaLinks = Input.SocialMediaLinks;

        var updateResult = await UserManager.UpdateAsync(user);

        if (!updateResult.Succeeded) 
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Unexpected error when trying to update the user.", HttpContext);
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        public DateOnly? DateOfBirth { get; set; }

        [Display(Name = "Display name")]
        public string? DisplayName { get; set; }

        [Display(Name = "Profile picture URL")]
        public string? ProfilePictureBase64 { get; set; }

        [Display(Name = "Location")]
        public string? Location { get; set; }

        [Display(Name = "Biography")]
        public string? Biography { get; set; }

        [Display(Name = "Social media links")]
        public string? SocialMediaLinks { get; set; }

        [Display(Name = "Registration date")]
        public DateTime RegistrationDate { get; set; }
    }
}

@page "/users/{UserName}"
@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IUserService UserService
@inject RecipeService RecipeService
@inject CookbookService CookbookService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<div class="user-profile-container">
    @if (User != null)
    {
        <PageTitle>@User.DisplayName Profile</PageTitle>

        <div class="profile-picture-container position-relative">
            @if (@User.ProfilePictureBase64 != null)
            {
                <div class="position-relative d-inline-block">
                    <MudImage Src="@User.ProfilePictureBase64" Alt="Profile Picture" Class="rounded-lg mb-2"
                              Style="width: 200px; height: auto;" />
                    @if (IsUserAuthor)
                    {
                        <div class="edit-icon position-absolute bottom-0 end-0 p-2 mr-1">
                            <i class="edit-pen fa fa-pen" @onclick="ShowEditProfPictureModal" style="cursor:pointer"></i>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="noprof-container position-relative d-inline-block">
                    <i class="bi bi-person-square" style="font-size: 9rem;"></i>

                    @if (IsUserAuthor)
                    {
                        <div class="edit-icon-noprof position-absolute bottom-0 end-0 p-2 mr-1">
                            <i class="edit-pen-noprof fa fa-pen" @onclick="ShowEditProfPictureModal" style="cursor:pointer"></i>
                        </div>
                    }
                </div>
            }
        </div>

        @if (ShowModal)
        {
            <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Profile Picture</h5>
                        </div>
                        <div class="modal-body">
                            <div class="position-relative text-center">
                                @if (User.ProfilePictureBase64 != null)
                                {
                                    <div class="profpic-preview">
                                        <MudImage Src="@User.ProfilePictureBase64" Alt="Profile Picture" Class="rounded-lg mb-2"
                                                  Style="width: 250px; height: auto;" />
                                        <br />
                                        <button class="btn btn-danger mb-3" type="button" @onclick="RemoveProfilePicture">Remove</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="profpic-preview">
                                        <i class="bi bi-person-square" style="font-size: 9rem;"></i>
                                    </div>
                                    @if (showFileUpload)
                                    {
                                        <div class="profpic-input col-md-12">
                                            <em><p class="profpic-help">Recommended file size: 800 x 800</p></em>
                                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleProfilePictureSelected" MaximumFileCount="1">
                                                <ActivatorContent>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                                        Choose Image
                                                    </MudButton>
                                                </ActivatorContent>
                                            </MudFileUpload>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditProfPictureModal">Cancel</button>
                            <button type="button" class="btn btn-success" @onclick="ConfirmProfilePicEdit">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="user-header-container col-md-10 position-relative pt-2">
            <div class="name-and-edit d-inline-flex">
                <div class="display-name">
                    <h3 class="displayname">@User.DisplayName</h3>
                </div>
                @if (IsUserAuthor)
                {
                    <div class="edit-profile-btn">
                        <p><a href="/Account/Manage" class="btn btn-primary">Edit Profile</a></p>
                    </div>
                }
            </div>
            <div class="userinfo-container">
                <p class="username">@("@")@User.UserName</p>
                <div class="bio-container">
                    <i class="bi bi-file-person d-inline-block"></i>
                    <p class="bio d-inline-block">@User.Biography</p>
                </div>
                <div class="joined-date-container">
                    <i class="bi bi-calendar-week d-inline-block"></i>
                    <p class="join-date d-inline-block">Joined @User.RegistrationDate.ToShortDateString()</p>
                </div>
            </div>
        </div>

        <div class="divider-line"></div>

        <div class="container pt-3">
            <div class="row">
                <div class="nav-header col-sm border border-light rounded text-center @(showRecipes ? "active" : "")">
                    <a class="nav-link @(showRecipes ? "active" : "")" @onclick="ShowRecipes">Recipes</a>
                </div>
                <div class="nav-header col-sm border border-light rounded text-center @(showInsights ? "active" : "")">
                    <a class="nav-link @(showInsights ? "active" : "")" @onclick="ShowInsights">Ingredient Insights</a>
                </div>
                <div class="nav-header col-sm border border-light rounded text-center @(showCookBooks ? "active" : "")">
                    <a class="nav-link @(showCookBooks ? "active" : "")" @onclick="ShowCookBooks">Cook Books</a>
                </div>
            </div>
        </div>

        <div class="useritems-container">
            @if (showRecipes)
            {
                @if (UserRecipes != null && UserRecipes.Any())
                {
                   <RecipeCards Recipes="UserRecipes" OnBookmarkClicked="OpenCookbookDialogAsync" />
                }
                else
                {
                    <p>No recipes found.</p>
                }
            }
            else if (showInsights)
            {
                <!-- Insights -->
                <p>Coming soon!</p>
                <!-- Display insights here -->
            }
            else if (showCookBooks)
            {
                <p>Coming soon!</p>
            }
        </div>
    }
    else
    {
        <PageTitle>User not found</PageTitle>
        <p>User not found.</p>
    }

</div>

@code {
    [Parameter]
    public string UserName { get; set; }

    private ApplicationUser User;
    private List<Recipe> UserRecipes;
    private bool showRecipes = true;
    private bool showInsights = false;
    private bool showCookBooks = false;
    private bool ShowModal = false;
    private IBrowserFile? profilePictureFile;
    private bool showFileUpload = true;
    private string? previousProfilePicture;
    private bool confirmProfilePic = false;
    private List<UserCookbook> UserCookbooks;
    private string userId { get; set; }
    private bool IsUserAuthor = false;

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserByUsernameAsync(UserName);
        if (User != null)
        {
            UserRecipes = await RecipeService.GetRecipesByAuthorAsync(User.Id);
            if (User.ProfilePictureBase64 != null)
            {
                previousProfilePicture = User.ProfilePictureBase64;
            } 
        }
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user != null)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        if (userId != null)
        {
            UserCookbooks = await CookbookService.GetCookbooksByUserIdAsync(userId);
        }
        if (userId == User.Id)
        {
            IsUserAuthor = true;
        }
    }

    private void ShowRecipes()
    {
        showCookBooks = false;
        showInsights = false;
        showRecipes = true;
    }

    private void ShowInsights()
    {
        showRecipes = false;
        showCookBooks = false;
        showInsights = true;
    }

    private void ShowCookBooks()
    {
        showRecipes = false;
        showInsights = false;
        showCookBooks = true;
    }

    private void ShowEditProfPictureModal() => ShowModal = true;

    private void CloseEditProfPictureModal()
    {
        ShowModal = false;
        profilePictureFile = null;
        if (!confirmProfilePic)
        {
            User.ProfilePictureBase64 = previousProfilePicture;
        }
    }

    private async Task HandleProfilePictureSelected(IBrowserFile file)
    {
        if (file != null)
        {
            profilePictureFile = file;
            var profilePicUrl = await RecipeService.UploadImageAsync(profilePictureFile);
            User.ProfilePictureBase64 = profilePicUrl;
            showFileUpload = false;
        }
    }

    private async Task ConfirmProfilePicEdit()
    {
        confirmProfilePic = true;
        await RecipeService.SaveChanges();
        CloseEditProfPictureModal();
    }

    private void RemoveProfilePicture()
    {
        profilePictureFile = null;
        User.ProfilePictureBase64 = null;
        showFileUpload = true;
    }

    private async Task OpenCookbookDialogAsync(int recipeId)
    {
        var parameters = new DialogParameters
        {
            { "UserCookbooks", UserCookbooks },
            { "RecipeID", recipeId }
        };

        var options = new DialogOptions
            {

                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<AddCookbookDialog>("Add to CookBook", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Recipe added successfully!", Severity.Success);
        }
    }

    // private void ShowAddCookbookModal(int recipeId)
    // {
    //     SelectedRecipeID = recipeId;
    //     ShowCookbookModal = true;
    // }

    // private void CloseAddCookbookModal() => ShowCookbookModal = false;

    // private void ShowCreateACookbookModal()
    // {
    //     HideModal = "hideModal";
    //     ShowCreateCookbookModal = true;
    // }

    // private void CloseCreateACookbookModal()
    // {
    //     cookbook.CoverImage = null;
    //     ShowCreateCookbookModal = false;
    //     HideModal = "showModal";
    // }

    // private void SelectCookbook(int cookbookId)
    // {
    //     if (selectedCookbooks.Contains(cookbookId))
    //     {
    //         selectedCookbooks.Remove(cookbookId);
    //     }
    //     else
    //     {
    //         selectedCookbooks.Add(cookbookId);
    //     }
    // }

    // private async void ConfirmCookbookSave()
    // {
    //     if (selectedCookbooks.Any())
    //     {
    //         CloseAddCookbookModal();
    //         await CookbookService.AddRecipeToCookbooks(SelectedRecipeID, selectedCookbooks);
    //         selectedCookbooks.Clear();

    //     }
    // }

    // private async Task HandleCoverImageSelected(IBrowserFile file)
    // {
    //     if (file != null)
    //     {
    //         CoverImage = file;
    //         var thumbnailUrl = await CookbookService.UploadImageAsync(CoverImage);
    //         cookbook.CoverImage = thumbnailUrl;
    //         showFileUpload = false;
    //     }
    // }

    // private void RemoveCoverImage()
    // {
    //     CoverImage = null;
    //     cookbook.CoverImage = null;
    //     showFileUpload = true;
    // }

    // private void SetCookbookPublic() => IsPublic = true;

    // private async Task SaveNewCookbook()
    // {
    //     cookbook.IsPublic = IsPublic;
    //     cookbook.DateCreated = DateTime.Now;
    //     cookbook.DateUpdated = DateTime.Now;
    //     cookbook.UserID = userId;
    //     await CookbookService.CreateCookbookAsync(cookbook);
    //     CloseCreateACookbookModal();
    // }
}

        @* MODAL FOR ADDING TO COOKBOOK *@
@*         @if (ShowCookbookModal)
        {
            <div class="modal fade show @HideModal" tabindex="-1" role="dialog" aria-labelledby="addToCookbook" aria-hidden="true" data-bs-backdrop="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add to CookBook</h5>
                        </div>
                        <div class="modal-body">
                            <div class="position-relative text-center">
                                @if (UserCookbooks.Count > 0)
                                {
                                    <h5 class="mb-2">Select a Cookbook</h5>
                                    <div class="cookbook-card-container">
                                        @foreach (var cookbook in UserCookbooks)
                                        {
                                            var isCookbookPublic = cookbook.IsPublic ? "Public" : "Private";
                                            <div class="cookbook-card @(selectedCookbooks.Contains(cookbook.CookbookID) ? "selected" : "")" @onclick="() => SelectCookbook(cookbook.CookbookID)">
                                                <div class="cookbook-img position-relative">
                                                    @if (!string.IsNullOrEmpty(cookbook.CoverImage))
                                                    {
                                                        <img class="cookbookcard-img-top" src="@cookbook.CoverImage" alt="Cover Image" title="@cookbook.CookbookName" />
                                                    }
                                                </div>
                                                <div class="cookbookcard-body">
                                                    <h5 class="cookbookcard-title d-inline-block">@cookbook.CookbookName</h5>
                                                    <em><p class="cookbookdate-created" title="Created Date">@cookbook.DateCreated.ToShortDateString()</p></em>
                                                    <p class="cookbook-ispublic @isCookbookPublic">@isCookbookPublic</p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="create-cookbook-button mt-4">
                                        <button type="button" class="btn btn-primary" @onclick="ShowCreateACookbookModal">New Cookbook</button>
                                    </div>
                                }
                                else
                                {
                                    <p>You don't have any Cookbooks!</p>
                                    <button type="button" class="btn btn-primary" @onclick="ShowCreateACookbookModal">New Cookbook</button>
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddCookbookModal">Cancel</button>
                            <button type="button" class="btn btn-success" @onclick="ConfirmCookbookSave">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (ShowCreateCookbookModal)
        {
            <EditForm Model="@cookbook" OnValidSubmit="SaveNewCookbook" FormName="CreateCookbookForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;" aria-labelledby="createCookbook" aria-hidden="true" data-bs-backdrop="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Create New Cookbook</h5>
                            </div>
                            <div class="modal-body">
                                <div class="coverimg-container text-center py-2">
                                    <div class="coverimg-title col-md-12 pb-2">
                                        <p class="cookbookCoverImg">Cover Image</p>
                                    </div>
                                    <div class="coverimg-preview">
                                        @if (cookbook.CoverImage != null)
                                        {
                                            <MudImage Src="@cookbook.CoverImage" Alt="Cover Image" Class="border-4 border-solid mud-border-primary pa-4 rounded mb-2"
                                                      Style="width: 400px; height: auto;" />
                                            <button class="btn btn-danger mb-3" type="button" @onclick="RemoveCoverImage">Remove</button>
                                        }
                                    </div>
                                    @if (showFileUpload)
                                    {
                                        <div class="coverimg-input col-md-12">
                                            <em><p class="coverimg-help">Recommended file size: 1200 x 1800</p></em>
                                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleCoverImageSelected" MaximumFileCount="1">
                                                <ActivatorContent>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                                        Choose Image
                                                    </MudButton>
                                                </ActivatorContent>
                                            </MudFileUpload>
                                        </div>
                                    }
                                </div>
                                <div class="cookbookname-container py-2">
                                    <label for="cookbookName">Name</label>
                                    <InputText type="text" class="cookbookName form-control" placeholder="Fall Recipes" @bind-Value="cookbook.CookbookName" />
                                </div>
                                <div class="cookbookdesc-container py-2">
                                    <label for="cookbookDesc">Cookbook Description</label>
                                    <InputTextArea class="cookbookDesc form-control" placeholder="Collection of the best fall recipes!" @bind-Value="cookbook.CookbookDescription" />
                                </div>
                                <div class="ispublic-container mt-2 text-center">
                                    <p class="ispublic-msg">Do you want this CookBook to be public?</p>
                                    <MudSwitch T="bool" Color="Color.Primary" ValueChanged="SetCookbookPublic" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseCreateACookbookModal">Cancel</button>
                                <button type="button" class="btn btn-success" @onclick="SaveNewCookbook">Save Cookbook</button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        } *@
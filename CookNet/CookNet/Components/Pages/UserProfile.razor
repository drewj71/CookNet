@page "/users/{UserName}"
@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IUserService UserService
@inject RecipeService RecipeService
@inject CookbookService CookbookService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<div class="user-profile-container">
    @if (User != null)
    {
        <PageTitle>@User.DisplayName Profile</PageTitle>

        <div class="profile-picture-container position-relative">
            @if (@User.ProfilePictureBase64 != null)
            {
                <div class="position-relative d-inline-block">
                    <MudImage Src="@User.ProfilePictureBase64" Alt="Profile Picture" Class="rounded-lg mb-2"
                              Style="width: 200px; height: auto;" />
                    @if (IsUserAuthor)
                    {
                        <div class="edit-icon position-absolute bottom-0 end-0 p-2 mr-1">
                            <i class="edit-pen fa fa-pen" @onclick="ShowEditProfPictureModal" style="cursor:pointer"></i>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="noprof-container position-relative d-inline-block">
                    <i class="bi bi-person-square" style="font-size: 9rem;"></i>

                    @if (IsUserAuthor)
                    {
                        <div class="edit-icon-noprof position-absolute bottom-0 end-0 p-2 mr-1">
                            <i class="edit-pen-noprof fa fa-pen" @onclick="ShowEditProfPictureModal" style="cursor:pointer"></i>
                        </div>
                    }
                </div>
            }
        </div>

        @if (ShowModal)
        {
            <div class="modal fade show" tabindex="-1" role="dialog" style="display:block;">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Profile Picture</h5>
                        </div>
                        <div class="modal-body">
                            <div class="position-relative text-center">
                                @if (User.ProfilePictureBase64 != null)
                                {
                                    <div class="profpic-preview">
                                        <MudImage Src="@User.ProfilePictureBase64" Alt="Profile Picture" Class="rounded-lg mb-2"
                                                  Style="width: 250px; height: auto;" />
                                        <br />
                                        <button class="btn btn-danger mb-3" type="button" @onclick="RemoveProfilePicture">Remove</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="profpic-preview">
                                        <i class="bi bi-person-square" style="font-size: 9rem;"></i>
                                    </div>
                                    @if (showFileUpload)
                                    {
                                        <div class="profpic-input col-md-12">
                                            <em><p class="profpic-help">Recommended file size: 800 x 800</p></em>
                                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleProfilePictureSelected" MaximumFileCount="1">
                                                <ActivatorContent>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                                        Choose Image
                                                    </MudButton>
                                                </ActivatorContent>
                                            </MudFileUpload>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditProfPictureModal">Cancel</button>
                            <button type="button" class="btn btn-success" @onclick="ConfirmProfilePicEdit">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="user-header-container col-md-10 position-relative pt-2">
            <div class="name-and-edit d-inline-flex">
                <div class="display-name">
                    <h3 class="displayname">@User.DisplayName</h3>
                </div>
                @if (IsUserAuthor)
                {
                    <div class="edit-profile-btn">
                        <p><a href="/Account/Manage" class="btn btn-primary">Edit Profile</a></p>
                    </div>
                }
            </div>
            <div class="userinfo-container">
                <p class="username">@("@")@User.UserName</p>
                <div class="bio-container">
                    <i class="bi bi-file-person d-inline-block"></i>
                    <p class="bio d-inline-block">@User.Biography</p>
                </div>
                <div class="joined-date-container">
                    <i class="bi bi-calendar-week d-inline-block"></i>
                    <p class="join-date d-inline-block">Joined @User.RegistrationDate.ToShortDateString()</p>
                </div>
            </div>
        </div>

        <div class="divider-line"></div>

        <div class="container pt-3">
            <div class="row">
                <div class="nav-header col-sm border border-light rounded text-center @(showRecipes ? "active" : "")">
                    <a class="nav-link @(showRecipes ? "active" : "")" @onclick="ShowRecipes">Recipes</a>
                </div>
                <div class="nav-header col-sm border border-light rounded text-center @(showInsights ? "active" : "")">
                    <a class="nav-link @(showInsights ? "active" : "")" @onclick="ShowInsights">Ingredient Insights</a>
                </div>
                <div class="nav-header col-sm border border-light rounded text-center @(showCookBooks ? "active" : "")">
                    <a class="nav-link @(showCookBooks ? "active" : "")" @onclick="ShowCookBooks">Cook Books</a>
                </div>
            </div>
        </div>

        <div class="useritems-container">
            @if (showRecipes)
            {
                if (UserRecipes != null && UserRecipes.Any())
                {
                   <RecipeCards Recipes="UserRecipes" OnBookmarkClicked="OpenCookbookDialogAsync" />
                }
                else
                {
                    <p>No recipes found.</p>
                }
            }
            else if (showInsights)
            {
                <!-- Insights -->
                <p>Coming soon!</p>
                <!-- Display insights here -->
            }
            else if (showCookBooks)
            {
                <div class="displaycookbooks-container">
                    @if (UserCookbooks != null && UserCookbooks.Count > 0)
                    {
                        @foreach (var cookbook in UserCookbooks)
                        {
                            if (IsUserAuthor)
                            {
                                var isCookbookPublic = cookbook.IsPublic ? "Public" : "Private";
                                <div class="cookbook-card-container">
                                    <div class="cookbook-card">
                                        <div class="cookbook-img" @onclick="() => NavigateToCookbookRecipes(cookbook.CookbookID, cookbook.CookbookName)">
                                            @if (!string.IsNullOrEmpty(cookbook.CoverImage))
                                            {
                                                <img class="cookbookcard-img-top" src="@cookbook.CoverImage" alt="Cover Image" title="@cookbook.CookbookName" />
                                            }
                                        </div>
                                        <div class="cookbookcard-body">
                                            <h5 class="cookbookcard-title">@cookbook.CookbookName</h5>
                                            <p class="cookbookdate-created">@cookbook.DateCreated.ToShortDateString()</p>
                                            <p class="cookbook-ispublic @isCookbookPublic">@((cookbook.IsPublic ? "Public" : "Private"))</p>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                if (cookbook.IsPublic)
                                {
                                    var isCookbookPublic = cookbook.IsPublic ? "Public" : "Private";
                                    <div class="cookbook-card-container">
                                        <div class="cookbook-card">
                                            <div class="cookbook-img" @onclick="() => NavigateToCookbookRecipes(cookbook.CookbookID, cookbook.CookbookName)">
                                                @if (!string.IsNullOrEmpty(cookbook.CoverImage))
                                                {
                                                    <img class="cookbookcard-img-top" src="@cookbook.CoverImage" alt="Cover Image" title="@cookbook.CookbookName" />
                                                }
                                            </div>
                                            <div class="cookbookcard-body">
                                                <h5 class="cookbookcard-title">@cookbook.CookbookName</h5>
                                                <p class="cookbookdate-created">@cookbook.DateCreated.ToShortDateString()</p>
                                                <p class="cookbook-ispublic @isCookbookPublic">@((cookbook.IsPublic ? "Public" : "Private"))</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                    else
                    {
                        <div class="nonefound-container text-center">
                            <h5 class="nonefound-title">You don't have any CookBooks yet!</h5>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <PageTitle>User not found</PageTitle>
        <p>User not found.</p>
    }

</div>

@code {
    [Parameter]
    public string UserName { get; set; }

    private ApplicationUser User;
    private List<Recipe> UserRecipes;
    private bool showRecipes = true;
    private bool showInsights = false;
    private bool showCookBooks = false;
    private bool ShowModal = false;
    private IBrowserFile? profilePictureFile;
    private bool showFileUpload = true;
    private string? previousProfilePicture;
    private bool confirmProfilePic = false;
    private List<UserCookbook> UserCookbooks;
    private string UserID { get; set; }
    private bool IsUserAuthor = false;

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserByUsernameAsync(UserName);
        if (User != null)
        {
            UserRecipes = await RecipeService.GetRecipesByAuthorAsync(User.Id);
            UserCookbooks = await CookbookService.GetCookbooksByUserIdAsync(User.Id);
            if (User.ProfilePictureBase64 != null)
            {
                previousProfilePicture = User.ProfilePictureBase64;
            } 
        }
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user != null)
        {
            UserID = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        if (UserID != null)
        {
            UserCookbooks = await CookbookService.GetCookbooksByUserIdAsync(UserID);
        }
        if (UserID == User.Id)
        {
            IsUserAuthor = true;
        }
    }

    private void ShowRecipes()
    {
        showCookBooks = false;
        showInsights = false;
        showRecipes = true;
    }

    private void ShowInsights()
    {
        showRecipes = false;
        showCookBooks = false;
        showInsights = true;
    }

    private void ShowCookBooks()
    {
        showRecipes = false;
        showInsights = false;
        showCookBooks = true;
    }

    private void ShowEditProfPictureModal() => ShowModal = true;

    private void CloseEditProfPictureModal()
    {
        ShowModal = false;
        profilePictureFile = null;
        if (!confirmProfilePic)
        {
            User.ProfilePictureBase64 = previousProfilePicture;
        }
    }

    private async Task HandleProfilePictureSelected(IBrowserFile file)
    {
        if (file != null)
        {
            profilePictureFile = file;
            var profilePicUrl = await RecipeService.UploadImageAsync(profilePictureFile);
            User.ProfilePictureBase64 = profilePicUrl;
            showFileUpload = false;
        }
    }

    private async Task ConfirmProfilePicEdit()
    {
        confirmProfilePic = true;
        await RecipeService.SaveChanges();
        CloseEditProfPictureModal();
    }

    private async Task LoadUserCookbooks()
    {
        StateHasChanged();
    }

    private void RemoveProfilePicture()
    {
        profilePictureFile = null;
        User.ProfilePictureBase64 = null;
        showFileUpload = true;
    }

    private async Task OpenCookbookDialogAsync(int recipeId)
    {
        var parameters = new DialogParameters
        {
            { "UserCookbooks", UserCookbooks },
            { "RecipeID", recipeId },
            { "UserID" , UserID },
            { "RefreshCookbooksCallback", EventCallback.Factory.Create(this, LoadUserCookbooks) }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<AddCookbookDialog>("Add to CookBook", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Recipe added successfully!", Severity.Success);
        }
    }

    private void NavigateToCookbookRecipes(int cookbookId, string cookbookName)
    {
        Nav.NavigateTo($"/cookbook-recipes/{cookbookId}/{cookbookName}");
    }
}
@page "/create-recipe"
@using CookNet.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.IO
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<div class="create-recipe-container">
    <EditForm Model="@Recipe" OnValidSubmit="HandleSubmit" FormName="CreateRecipeForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h3 class="create-recipe-title">Create a New Recipe</h3>

        <div class="form-group">
            <label for="Name">Name:</label>
            <InputText id="Name" class="form-control" @bind-Value="@Recipe.Name" placeholder="Levain Chocolate Chip Cookies" />
        </div>

        @if (@Recipe.ThumbnailImage != null)
        {
            <div class="thumbnail-container position-relative">
                <img src="@Recipe.ThumbnailImage" alt="RecipeThumbnail" class="border rounded shadow m-2 p-2 preview-thumbnail">
                <button type="button" class="close" aria-label="Close" @onclick="RemoveThumbnail">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

        <div class="file-input-wrapper">
            <InputFile class="custom-file-input" OnChange="@HandleThumbnailImageSelected" accept="image/*"
            style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; z-index: 2;
            "
            />
            <label for="file-upload" class="custom-file-label">Upload Thumbnail</label>
        </div>
        <span class="file-upload-hint"> Recommended file size: 1920x1080</span>

        <div class="form-group">
            <label for="Description">Description:</label>
            <InputTextArea id="Description" class="form-control" @bind-Value="@Recipe.Description" placeholder="Quick, Easy, Delicious Recipe!" />
        </div>

        <div class="col-md-3 form-group inline-group">
            <label for="PrepTime">Prep Time (minutes):</label>
            <InputNumber id="PrepTime" class="form-control" @bind-Value="@Recipe.PrepTime" />
        </div>

        <div class="col-md-3 form-group inline-group">
            <label for="CookTime">Cook Time (minutes):</label>
            <InputNumber id="CookTime" class="form-control" @bind-Value="@Recipe.CookTime" />
        </div>

        <div class="col-md-3 form-group inline-group-long">
            <label for="Category">Category:</label>
            <InputSelect id="Category" class="form-control long-select" @bind-Value="@Recipe.Category">
                <option value="Select One">--Select One--</option>
                <option value="Breakfast">Breakfast</option>
                <option value="Lunch">Lunch</option>
                <option value="Appetizer">Appetizer</option>
                <option value="Dinner">Dinner</option>
                <option value="Dessert">Dessert</option>
                <option value="Snack">Snack</option>
                <option value="Beverage">Beverage</option>
                <option value="Topping">Topping</option>
            </InputSelect>
        </div>

        <div class="col-sm-1 col-md-3 form-group inline-group-long">
            <label for="Ethnicity">Ethnicity:</label>
            <InputSelect id="Ethnicity" class="form-control long-select" @bind-Value="@Recipe.Ethnicity">
                <option value="Select One">--Select One--</option>
                <option value="NA">N/A</option>
                <option value="Asian">Asian</option>
                <option value="LatinHispanic">Latin/Hispanic</option>
                <option value="Mediterranean">Mediterranean</option>
                <option value="MiddleEastern">Middle Eastern</option>
                <option value="American">American</option>
                <option value="Southern">Southern</option>
            </InputSelect>
        </div>

        <div class="col-md-6 form-group ingredient-inline-long">
            <label for="NewIngredientName">Ingredient Name:</label>
            <InputText id="NewIngredientName" class="form-control" @bind-Value="@NewIngredientName" placeholder="All-Purpose Flour" />
        </div>
        <div class="col-md-2 form-group ingredient-inline">
            <label for="NewIngredientQuantity">Quantity:</label>
            <InputText id="NewIngredientQuantity" class="form-control" @bind-Value="@NewIngredientQuantity" placeholder="1/2" />
        </div>
        <div class="col-md-2 form-group ingredient-inline">
            <label for="NewIngredientQuantityUnit">Quantity Unit:</label>
            <InputText id="NewIngredientQuantityUnit" class="form-control" @bind-Value="@NewIngredientQuantityUnit" placeholder="cup" />
        </div>

        <p class="col-md-2 ingredient-inline"><button type="button" class="btn btn-primary" @onclick="AddIngredientAsync">Add</button></p>

        @if (AddedIngredients.Any())
        {
            <div style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px;">
                <h4>Added Ingredients:</h4>
                <ul class="list-unstyled">
                    @foreach (var ingredient in AddedIngredients)
                    {
                        <li>
                            <button type="button" class="btn btn-link text-danger" @onclick="() => RemoveIngredient(ingredient)">X</button>
                            @($"{ingredient.Quantity} {ingredient.QuantityUnit} {ingredient.Name}")
                        </li>
                    }
                </ul>
            </div>
        }

        <div class="form-group">
            <label for="NewInstructionText">Instructions:</label>
            <InputTextArea id="NewInstructionText" class="form-control" @bind-Value="NewInstructionText" placeholder="Preheat oven to 450." />
        </div>
        <p class="instr-story-btn"><button type="button" class="btn btn-primary" @onclick="AddInstructionAsync">Add</button></p>

        @if (AddedInstructions.Any())
        {
            <div style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px;">
                <h4>Added Instructions:</h4>
                <ul class="list-unstyled">
                    @foreach (var instruction in AddedInstructions)
                    {
                        <li>
                            <button type="button" class="btn btn-link text-danger" @onclick="() => RemoveInstruction(instruction)">X</button>
                            @($"{instruction.StepNumber}. {instruction.InstructionText}")
                        </li>
                    }
                </ul>
            </div>
        }

        <div class="form-group">
            <label for="RecipeStory">Story:</label>
            <InputTextArea id="RecipeStory" class="form-control" @bind-Value="NewRecipeStory" placeholder="Long detailed recipe story - " style="height: 300px;" />
        </div>
        <p class="instr-story-btn"><button type="button" class="btn btn-primary" @onclick="AddRecipeStoryAsync">Add</button></p>

        @if (AddedRecipeStory.Any())
        {
            <div style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px;">
                <h4>Added Story:</h4>
                <ul class="list-unstyled">
                    @foreach (var story in AddedRecipeStory)
                    {
                        <li>
                            <button type="button" class="btn btn-link text-danger" @onclick="() => RemoveStory(story)">X</button>
                            @($"{story.StoryText}")
                        </li>
                    }
                </ul>
            </div>
        }
        <button type="submit" class="btn btn-success">Submit</button>
    </EditForm>
</div>

@code {
    private Recipe Recipe { get; set; } = new Recipe();
    private string NewIngredientName { get; set; }
    private string NewIngredientQuantity { get; set; }
    private string NewIngredientQuantityUnit { get; set; }
    private string NewInstructionText { get; set; }
    private string NewRecipeStory { get; set; }
    private string UserId { get; set; }
    List<Ingredient> AddedIngredients { get; set; } = new();
    List<Instruction> AddedInstructions { get; set; } = new();
    List<RecipeStory> AddedRecipeStory { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Recipe = new Recipe();
        AddedIngredients = new List<Ingredient>();
        AddedInstructions = new List<Instruction>();
        AddedRecipeStory = new List<RecipeStory>();
    }

    private async Task AddIngredientAsync()
    {
        AddedIngredients.Add(new Ingredient
        {
            Name = NewIngredientName,
            Quantity = NewIngredientQuantity,
            QuantityUnit = NewIngredientQuantityUnit
        });

        NewIngredientName = string.Empty;
        NewIngredientQuantity = string.Empty;
        NewIngredientQuantityUnit = string.Empty;
    }

    private async Task AddInstructionAsync()
    {
        int stepNumber = AddedInstructions.Count + 1;
        AddedInstructions.Add(new Instruction
        {
            StepNumber = stepNumber,
            InstructionText = NewInstructionText
        });

        NewInstructionText = string.Empty;
    }

    private async Task AddRecipeStoryAsync()
    {
        AddedRecipeStory.Add(new RecipeStory
        {
            StoryText = NewRecipeStory
        });

        NewRecipeStory = string.Empty;
    }

    async void RemoveIngredient(Ingredient ingredient)
    {
        AddedIngredients.Remove(ingredient);
    }

    async void RemoveInstruction(Instruction instruction)
    {
        AddedInstructions.Remove(instruction);
    }

    async void RemoveStory(RecipeStory story)
    {
        AddedRecipeStory.Remove(story);
    }

    private async Task HandleThumbnailImageSelected(InputFileChangeEventArgs e)
    {
        var thumbnailImage = e.File;
        var thumbnailUrl = await RecipeService.UploadImageAsync(thumbnailImage);
        Recipe.ThumbnailImage = thumbnailUrl;
    }

    private void RemoveThumbnail()
    {
        Recipe.ThumbnailImage = null;
    }

    async Task HandleSubmit()
    {
        // Fetch the current user
        var currentUser = await UserService.GetUserAsync();

        // Ensure a user is fetched before proceeding
        if (currentUser != null)
        {
            Recipe.Author = currentUser;
            Recipe.DateCreated = DateTime.Now;

            foreach (var ingredient in AddedIngredients)
            {
                await RecipeService.AddIngredientToRecipeAsync(Recipe, ingredient.Name, ingredient.Quantity, ingredient.QuantityUnit);
            }

            foreach (var instruction in AddedInstructions)
            {
                await RecipeService.AddInstructionToRecipeAsync(Recipe, instruction.InstructionText);
            }

            foreach (var story in AddedRecipeStory)
            {
                await RecipeService.AddRecipeStoryToRecipeAsync(Recipe, story.StoryText);
            }

            await RecipeService.CreateRecipeAsync(Recipe);
            NavigationManager.NavigateTo($"/recipes/{Recipe.ID}");
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
    }
}
@page "/create-recipe"
@using CookNet.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.IO
@using System.Globalization;
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RecipeService RecipeService
@inject NutritionService NutritionService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Create a Recipe</PageTitle>

<div class="create-recipe-container">
    <h3 class="create-recipe-title">Create a New Recipe</h3>
    <hr />

    <MudForm Model="@Recipe" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <div class="recipe-details-section">
            <div class="col-md-12 d-flex align-items-start" @onclick="ToggleRecipeDetailsSection" style="cursor: pointer;">
                <h3 class="section-title">Recipe Details</h3>
                <i class="open-section @(RecipeDetailsSectionIcon)"></i>
            </div>
            <div class="recipe-details-body" style="@(RecipeDetailsSectionOpen ? "display:block;" : "display:none;")">
                <hr />
                <div class="row">
                    <div class="col-md-12 d-flex align-items-center justify-content-center">
                        @if (Recipe.ThumbnailImage != null)
                        {
                            <MudImage Src="@Recipe.ThumbnailImage" Alt="Thumbnail Image" Class="mb-2"
                                      Style="width: 50%; height: auto; object-fit: cover;" />
                            @* <div class="col-md-6 d-flex px-3">
                        <button class="btn btn-danger" type="button" @onclick="RemoveThumbnail">Remove</button>
                        </div> *@
                        }

                        @if (showFileUpload)
                        {
                            <div class="thumbnailimg-input col-md-12">
                                <em><p class="thumbnailimg-help text-center" style="@(IsFileTooBig ? "color: red;" : "")">Max file size: 5 MB</p></em>
                                <MudFileUpload Class="align-items-center" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleThumbnailImageSelected" MaximumFileCount="10">
                                    <ActivatorContent>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                            Choose Thumbnail Image
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </div>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <MudTextField T="string" Label="Recipe Name" @bind-Value="@Recipe.Name" Required="true" RequiredError="Recipe Name is required!" Variant="Variant.Outlined"
                                      Error="@(!isNameValid)" ErrorText="Required" Immediate="true" @onblur="ValidateRecipeName" />
                    </div>
                    <div class="form-group col-md-6">
                        <MudTextField T="string" Label="Description" @bind-Value="@Recipe.Description" Required="false" Variant="Variant.Outlined" />
                    </div>
                </div>
                <div class="row d-flex flex-wrap">
                    <div class="col-md-8 d-flex flex-column">
                        <MudTextField T="string" Label="Recipe Story" @bind-Value="@Recipe.RecipeStory" Required="true" Lines="17" RequiredError="Recipe Story is required!" Variant="Variant.Outlined"
                                      Error="@(!isStoryValid)" ErrorText="Required" Immediate="true" @onblur="ValidateRecipeStory" />
                    </div>
                    <div class="col-md-4">
                        <div class="col-md-12 form-group">
                            <MudNumericField T="int" Label="Prep Time" @bind-Value="@Recipe.PrepTime" Required="true" RequiredError="Prep time is required!"
                                             Variant="Variant.Outlined" Error="@(!isPrepValid)" ErrorText="Required" Immediate="true" @onblur="ValidatePrepTime" />
                        </div>
                        <div class="col-md-12 form-group">
                            <MudNumericField T="int" Label="Cook Time" @bind-Value="@Recipe.CookTime" Required="true" RequiredError="Cook time is required!"
                                             Variant="Variant.Outlined" Error="@(!isCookTimeValid)" ErrorText="Required" Immediate="true" @onblur="ValidateCookTime" />

                        </div>
                        <div class="col-md-12 form-group">
                            <MudNumericField T="int?" Label="Serving Size" @bind-Value="@Recipe.Servings" Required="false" Variant="Variant.Outlined" />
                        </div>
                        <div class="col-md-12 form-group">
                            <MudSelect T="string" @bind-Value="@Recipe.Category" Label="Select a Category" Placeholder="Category"
                                       Variant="Variant.Outlined" Clearable="true">
                                @if (RecipeCategories != null)
                                {
                                    @foreach (var cat in RecipeCategories)
                                    {
                                        <MudSelectItem Value="@(cat.CategoryName)">@cat.CategoryName</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </div>
                        <div class="col-md-12 form-group">
                            <MudSelect T="string" @bind-Value="@Recipe.Ethnicity" Label="Select an Ethnicity" Placeholder="Ethnicity"
                                       Variant="Variant.Outlined" Clearable="true">
                                @if (RecipeEthnicities != null)
                                {
                                    @foreach (var eth in RecipeEthnicities)
                                    {
                                        <MudSelectItem Value="@(eth.EthnicityName)">@eth.EthnicityName</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </div>
                    </div>
                </div>
                <div class="row">

                </div>
            </div>
            <hr />
        </div>

        <div class="ingredients-section">
            <div class="col-md-12 d-flex align-items-start" @onclick="ToggleIngredientsSection" style="cursor: pointer;">
                <h3 class="section-title">Ingredients & Instructions</h3>
                <i class="open-section @(IngredientsSectionIcon)"></i>
            </div>
            <div class="ingredients-body" style="@(IngredientsSectionOpen ? "display:block;" : "display:none;")">
                <hr />
                <div class="row">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-5 form-group">
                                <MudTextField T="string" Label="Ingredient Name" @bind-Value="@NewIngredientName" Variant="Variant.Outlined"
                                              Error="@(!isIngNameValid || !isIngredientsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateIngredientName" />
                            </div>
                            <div class="col-md-2 form-group">
                                <MudTextField T="string" Label="Quantity" @bind-Value="@NewIngredientQuantity" Variant="Variant.Outlined"
                                              Error="@(!isQuantityValid || !isIngredientsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateIngredientQuantity" />
                            </div>
                            <div class="col-md-2 form-group">
                                <MudTextField T="string" Label="Unit" @bind-Value="@NewIngredientQuantityUnit" Variant="Variant.Outlined" />
                            </div>
                            <div class="col-md-3 add-ingredient-btn">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddIngredientAsync">Add Ingredient</MudButton>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-9 form-group">
                                <MudTextField T="string" Label="Instruction" @bind-Value="@NewInstructionText" Variant="Variant.Outlined"
                                              Error="@(!isInstructionValid || !isInstructionsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateInstruction" />
                            </div>
                            <div class="col-md-3 add-instruction-btn">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddInstructionAsync">Add Instruction</MudButton>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        @if (AddedIngredients.Any())
                        {
                            <div class="ingredients-card mb-3">
                                <div class="ingredients-card-title text-center">
                                    <h4>Added Ingredients</h4>
                                </div>
                                <div class="ingredients-card-body">
                                    <ul class="list-unstyled">
                                        @foreach (var ingredient in AddedIngredients)
                                        {
                                            <li>
                                                <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveIngredient(ingredient)"></i>
                                                <span class="ingredient-span">@($"{ingredient.Quantity} {ingredient.QuantityUnit} {ingredient.Name} {(ingredient.ToGrams != null ? ingredient.ToGrams + "g" : null)}")</span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-md-6">
                        @if (AddedInstructions.Any())
                        {
                            <div class="instructions-card mb-3">
                                <div class="instructions-card-title text-center">
                                    <h4>Added Instructions</h4>
                                </div>
                                <div class="instructions-card-body">
                                    <ul class="list-unstyled">
                                        @foreach (var instruction in AddedInstructions)
                                        {
                                            <li>
                                                <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveInstruction(instruction)"></i>
                                                <span class="ingredient-span">@($"{instruction.InstructionText}")</span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <hr />
        </div>

        <div class="moreinfo-section">
            <div class="col-md-12 d-flex align-items-start" @onclick="ToggleMoreInfoSection" style="cursor: pointer;">
                <h3 class="section-title">Additional Info</h3>
                <i class="open-section @(MoreInfoSectionIcon)"></i>
            </div>
            <div class="moreinfo-body" style="@(MoreInfoSectionOpen ? "display:block;" : "display:none;")">
                <hr />
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="nutrition-info-card">
                                <div class="nutrition-info-header text-center">
                                    <h4 class="nutrition-info-title">Nutritional Info</h4>
                                </div>
                                <div class="nutrition-info-body">
                                    <span class="nutrition-info-span calories-nutrition">@(Calories > 0 ? (MarkupString)$"<b>Calories:</b> {Math.Round(Calories, 2)}" : null) @(CaloriesUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Calories > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span carbs-nutrition">@(Carbs > 0 ? (MarkupString)$"<b>Carbohydrates:</b> {Math.Round(Carbs, 2)}" : null) @(CarbsUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Carbs > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span protein-nutrition">@(Protein > 0 ? (MarkupString)$"<b>Protein:</b> {Math.Round(Protein, 2)}" : null) @(ProteinUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Protein > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span fat-nutrition">@(Fat > 0 ? (MarkupString)$"<b>Fat:</b> {Math.Round(Fat, 2)}" : null) @(FatUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Fat > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span totaltrans-nutrition">@(TotalTransFat > 0 ? (MarkupString)$"<b>Trans Fat:</b> {Math.Round(TotalTransFat, 2)}" : null) @(TotalTransFatUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(TotalTransFat > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span totalsatfat-nutrition">@(TotalSatFat > 0 ? (MarkupString)$"<b>Saturated Fat:</b> {Math.Round(TotalSatFat, 2)}" : null) @(TotalSatFatUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(TotalSatFat > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span cholesterol-nutrition">@(Cholesterol > 0 ? (MarkupString)$"<b>Cholesterol:</b> {Math.Round(Cholesterol, 2)}" : null) @(CholesterolUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Cholesterol > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span fiber-nutrition">@(Fiber > 0 ? (MarkupString)$"<b>Fiber:</b> {Math.Round(Fiber, 2)}" : null) @(FiberUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Fiber > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span sugar-nutrition">@(Sugar > 0 ? (MarkupString)$"<b>Sugar:</b> {Math.Round(Sugar, 2)}" : null)  @(SugarUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Sugar > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span calcium-nutrition">@(Calcium > 0 ? (MarkupString)$"<b>Calcium:</b> {Math.Round(Calcium, 2)}" : null) @(CalciumUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Calcium > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span sodium-nutrition">@(Sodium > 0 ? (MarkupString)$"<b>Sodium:</b> {Math.Round(Sodium, 2)}" : null) @(SodiumUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Sodium > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span iron-nutrition">@(Iron > 0 ? (MarkupString)$"<b>Iron:</b> {Math.Round(Iron, 2)}" : null) @(IronUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Iron > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span potassium-nutrition">@(Potassium > 0 ? (MarkupString)$"<b>Potassium:</b> {Math.Round(Potassium, 2)}" : null) @(PotassiumUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(Potassium > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span vitamina-nutrition">@(VitaminA > 0 ? (MarkupString)$"<b>VitaminA:</b> {Math.Round(VitaminA, 2)}" : null) @(VitaminAUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(VitaminA > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span vitaminc-nutrition">@(VitaminC > 0 ? (MarkupString)$"<b>VitaminC:</b> {Math.Round(VitaminC, 2)}" : null) @(VitaminCUnit ?? "")</span>
                                    <span class="nutrition-info-span info-divider">@(VitaminC > 0 ? " | " : "")</span>
                                    <p class="nutrition-info-tooltip text-center mt-3 fst-italic">Nutritional Information is calculated automatically based on entered ingredients, it is only an approximation.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="col-md-12">
                                <MudSelect T="string" Label="Allergens" MultiSelection="true" Placeholder="Allergens"
                                           Variant="Variant.Outlined" Clearable="true" @bind-SelectedValues="selectedAllergens">
                                    @foreach (var allergy in Allergens)
                                    {
                                        <MudSelectItem T="string" Value="@allergy.Name">@allergy.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </div>
                            <div class="col-md-12 mt-3">
                                <MudSelect T="string" Label="Diet Types" MultiSelection="true" Placeholder="Diet Types"
                                           Variant="Variant.Outlined" Clearable="true" @bind-SelectedValues="selectedDiets">
                                    @foreach (var diet in Diets)
                                    {
                                        <MudSelectItem T="string" Value="@diet.Name">@diet.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        <div class="col-md-12 mt-3">
            <div class="sumbit-btn d-flex justify-content-center">
                <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="HandleSubmit" Style="padding-left:200px; padding-right:200px;">Submit</MudButton>
            </div>
        </div>
    </MudForm>
</div>

@code {
    MudForm form;
    bool success;
    string[] errors = { };

    private Recipe Recipe { get; set; } = new Recipe();
    private string NewIngredientName { get; set; } = "";
    private string NewIngredientQuantity { get; set; } = "";
    private string? NewIngredientQuantityUnit { get; set; }
    private string NewInstructionText { get; set; } = "";
    private string UserId { get; set; }
    List<Ingredient> AddedIngredients { get; set; } = new();
    List<Instruction> AddedInstructions { get; set; } = new();
    List<RecipeStory> AddedRecipeStory { get; set; } = new();
    private IBrowserFile? ThumbnailImage;
    private bool showFileUpload = true;
    private bool isNameValid = true;
    private bool isDescriptionValid = true;
    private bool isPrepValid = true;
    private bool isCookTimeValid = true;
    private bool isCategoryValid = true;
    private bool isEthnicityValid = true;
    private bool isIngNameValid = true;
    private bool isQuantityValid = true;
    private bool isInstructionValid = true;
    private bool isStoryValid = true;
    private bool isIngredientsAdded = true;
    private bool isInstructionsAdded = true;
    private List<RecipeCategory> RecipeCategories;
    private List<RecipeEthnicity> RecipeEthnicities;
    private bool IsFileTooBig = false;

    private string RecipeDetailsSectionIcon = "bi bi-caret-up-fill";
    private string IngredientsSectionIcon = "bi bi-caret-down-fill";
    private string MoreInfoSectionIcon = "bi bi-caret-down-fill";

    private bool RecipeDetailsSectionOpen = true;
    private bool IngredientsSectionOpen = false;
    private bool MoreInfoSectionOpen = false;

    private Dictionary<string, FoodItem> AddedNutrients = new();
    private List<string> TotalIngredients = new();
    private double Calories = 0, Protein = 0, Fat = 0, Carbs = 0, Sugar = 0, Fiber = 0, Calcium = 0, Sodium = 0, Iron = 0, VitaminA = 0;
    private double VitaminC = 0, Cholesterol = 0, TotalTransFat = 0, TotalSatFat = 0, Potassium = 0;
    private string? CaloriesUnit = null, ProteinUnit = null, FatUnit = null, CarbsUnit = null, SugarUnit = null, FiberUnit = null, CalciumUnit = null, SodiumUnit = null;
    private string? IronUnit = null, VitaminAUnit = null, VitaminCUnit = null,  CholesterolUnit = null, TotalTransFatUnit = null, TotalSatFatUnit = null, PotassiumUnit = null;

    private IEnumerable<string> selectedAllergens { get; set; } = new HashSet<string>();
    private IEnumerable<string> selectedDiets { get; set; } = new HashSet<string>();
    private List<DietTypes> Diets { get; set; } = new();
    private List<AllergenTypes> Allergens { get; set; } = new();

    protected override async void OnInitialized()
    {
        Recipe = new Recipe();
        AddedIngredients = new List<Ingredient>();
        AddedInstructions = new List<Instruction>();
        AddedRecipeStory = new List<RecipeStory>();
    }

    protected override async Task OnInitializedAsync()
    {
        RecipeCategories = await RecipeService.GetActiveRecipeCategories();
        RecipeEthnicities = await RecipeService.GetActiveRecipeEthnicities();
        Diets = await RecipeService.GetDietTypes();
        Allergens = await RecipeService.GetAllergenTypes();
    }

    private string GetInputStyle(string value, bool isValid)
    {
        return string.IsNullOrWhiteSpace(value) && !isValid ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private string GetInputStyleInt(int value, bool isValid)
    {
        return value <= 0 && !isValid ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private string GetInputStyleDDL(string value, bool isValid)
    {
        return !isValid && (value == "Select One" || string.IsNullOrEmpty(value)) ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    public double? ConvertToGrams(string userInput, string householdServingFullText, double servingSizeInGrams)
    {
        // Step 1: Parse household serving to get quantity and unit
        var householdParts = householdServingFullText.Split(' ', 2);
        if (householdParts.Length != 2)
            return null;

        if (!double.TryParse(householdParts[0], out double householdQuantity))
            return null;

        string householdUnit = householdParts[1].ToLower();

        // Step 2: Parse user input to extract quantity and unit
        var userParts = userInput.Split(' ', 2);
        if (userParts.Length != 2)
            return null;

        if (!double.TryParse(userParts[0], out double userQuantity))
            return null;

        string userUnit = userParts[1].ToLower();

        double householdQuantityInGrams = NutritionService.ConvertToGrams(householdUnit, householdQuantity);
        double userQuantityInGrams = NutritionService.ConvertToGrams(userUnit, userQuantity);

        double conversionFactor = servingSizeInGrams / householdQuantityInGrams;
        return userQuantityInGrams * conversionFactor > 0 ? userQuantityInGrams * conversionFactor : null;
    }


    private async Task AddIngredientAsync()
    {
        ValidateIngredientName();
        ValidateIngredientQuantity();
        if (isIngNameValid && isQuantityValid)
        {
            var nutrients = await NutritionService.GetFoodDetailsAsync(NewIngredientName);
            double? grams = null;
            var userAmount = 0.0;

            if (nutrients != null)
            {
                if (nutrients.ServingSize >= 0)
                {
                    var servingSize = nutrients.ServingSize > 0 ? nutrients.ServingSize : 1;
                    if (NewIngredientQuantity.Trim().Contains(" "))
                    {
                        var numParts = NewIngredientQuantity.Split(' ');
                        if (numParts.Length > 1)
                        {
                            double wholeNumber = double.Parse(numParts[0], CultureInfo.InvariantCulture);
                            double fraction = NutritionService.ConvertFractionToDecimal(numParts[1]);
                            userAmount = wholeNumber + fraction;
                        }
                    }
                    else if (NewIngredientQuantity.Trim().Contains("/"))
                    {
                        userAmount = NutritionService.ConvertFractionToDecimal(NewIngredientQuantity);
                    }
                    else 
                    {
                        try
                        {
                            userAmount = Convert.ToDouble(NewIngredientQuantity);
                        }
                        catch (Exception ex) 
                        {
                            Console.WriteLine($"Error: {ex.Message}");
                        }
                        finally
                        {
                            userAmount = 1.00;
                        }
                    }

                    foreach (var nutrient in nutrients.FoodNutrients)
                    {
                        double nutrientRatio = userAmount / servingSize;

                        if (nutrient.NutrientName.ToUpper().Contains("PROTEIN"))
                        {
                            Protein += nutrient.Value * nutrientRatio;
                            ProteinUnit = Protein > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("TOTAL LIPID"))
                        {
                            Fat += nutrient.Value * nutrientRatio;
                            FatUnit = Fat > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("CARBOHYDRATE"))
                        {
                            Carbs += nutrient.Value * nutrientRatio;
                            CarbsUnit = Carbs > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("ENERGY"))
                        {
                            Calories += nutrient.Value * nutrientRatio;
                            CaloriesUnit = Calories > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("SUGAR"))
                        {
                            Sugar += nutrient.Value * nutrientRatio;
                            SugarUnit = Sugar > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("FIBER"))
                        {
                            Fiber += nutrient.Value * nutrientRatio;
                            FiberUnit = Fiber > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("CALCIUM"))
                        {
                            Calcium += nutrient.Value * nutrientRatio;
                            CalciumUnit = Calcium > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("SODIUM"))
                        {
                            Sodium += nutrient.Value * nutrientRatio;
                            SodiumUnit = Sodium > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("IRON"))
                        {
                            Iron += nutrient.Value * nutrientRatio;
                            IronUnit = Iron > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("VITAMINA"))
                        {
                            VitaminA += nutrient.Value * nutrientRatio;
                            VitaminAUnit = VitaminA > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("VITAMINC"))
                        {
                            VitaminC += nutrient.Value * nutrientRatio;
                            VitaminCUnit = VitaminC > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("CHOLESTEROL"))
                        {
                            Cholesterol += nutrient.Value * nutrientRatio;
                            CholesterolUnit = Cholesterol > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("TRANS"))
                        {
                            TotalTransFat += nutrient.Value * nutrientRatio;
                            TotalTransFatUnit = TotalTransFat > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("SATURATED"))
                        {
                            TotalSatFat += nutrient.Value * nutrientRatio;
                            TotalSatFatUnit = TotalSatFat > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                        else if (nutrient.NutrientName.ToUpper().Contains("POTASSIUM"))
                        {
                            Potassium += nutrient.Value * nutrientRatio;
                            PotassiumUnit = Potassium > 0 ? nutrient.UnitName.ToLower() : null;
                        }
                    }
                }
                TotalIngredients.Add(nutrients.Ingredients);
                AddedNutrients[NewIngredientName] = nutrients;
                if (!string.IsNullOrEmpty(NewIngredientQuantityUnit) && nutrients.HouseholdServingFullText != null)
                {
                    grams = ConvertToGrams(userAmount + " " + NewIngredientQuantityUnit, nutrients.HouseholdServingFullText, nutrients.ServingSize);
                }
            }

            AddedIngredients.Add(new Ingredient
            {
                Name = NewIngredientName,
                Quantity = NewIngredientQuantity,
                QuantityUnit = NewIngredientQuantityUnit,
                ToGrams = grams
            });

            NewIngredientName = string.Empty;
            NewIngredientQuantity = string.Empty;
            NewIngredientQuantityUnit = string.Empty;
        }
    }

    private async Task AddInstructionAsync()
    {
        ValidateInstruction();
        if (isInstructionValid)
        {
            AddedInstructions.Add(new Instruction
            {
                InstructionText = NewInstructionText
            });

            NewInstructionText = string.Empty;
        }
    }

    async void RemoveIngredient(Ingredient ingredient)
    {
        AddedIngredients.Remove(ingredient);
        if (AddedNutrients.TryGetValue(ingredient.Name, out FoodItem item))
        {
            foreach (var nutrient in item.FoodNutrients)
            {
                if (nutrient.NutrientName.ToUpper().Contains("PROTEIN"))
                {
                    Protein -= nutrient.Value;
                    ProteinUnit = Protein > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("TOTAL LIPID"))
                {
                    Fat -= nutrient.Value;
                    FatUnit = Fat > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("CARBOHYDRATE"))
                {
                    Carbs -= nutrient.Value;
                    CarbsUnit = Carbs > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("ENERGY"))
                {
                    Calories -= nutrient.Value;
                    CaloriesUnit = Calories > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("SUGAR"))
                {
                    Sugar -= nutrient.Value;
                    SugarUnit = Sugar > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("FIBER"))
                {
                    Fiber -= nutrient.Value;
                    FiberUnit = Fiber > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("CALCIUM"))
                {
                    Calcium -= nutrient.Value;
                    CalciumUnit = Calcium > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("SODIUM"))
                {
                    Sodium -= nutrient.Value;
                    SodiumUnit = Sodium > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("IRON"))
                {
                    Iron -= nutrient.Value;
                    IronUnit = Iron > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("VITAMINA"))
                {
                    VitaminA -= nutrient.Value;
                    VitaminAUnit = VitaminA > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("VITAMINC"))
                {
                    VitaminC -= nutrient.Value;
                    VitaminCUnit = VitaminC > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("CHOLESTEROL"))
                {
                    Cholesterol -= nutrient.Value;
                    CholesterolUnit = Cholesterol > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("TRANS"))
                {
                    TotalTransFat -= nutrient.Value;
                    TotalTransFatUnit = TotalTransFat > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("SATURATED"))
                {
                    TotalSatFat -= nutrient.Value;
                    TotalSatFatUnit = TotalSatFat > 0 ? nutrient.UnitName.ToLower() : null;
                }
                else if (nutrient.NutrientName.ToUpper().Contains("POTASSIUM"))
                {
                    Potassium -= nutrient.Value;
                    PotassiumUnit = Potassium > 0 ? nutrient.UnitName.ToLower() : null;
                }
            }
        }
    }

    async void RemoveInstruction(Instruction instruction)
    {
        AddedInstructions.Remove(instruction);
    }

    private async Task HandleThumbnailImageSelected(IBrowserFile file)
    {
        if (file != null)
        {
            ThumbnailImage = file;
            var thumbnailUrl = await RecipeService.UploadImageAsync(ThumbnailImage);
            if (!string.IsNullOrEmpty(thumbnailUrl))
            {
                Recipe.ThumbnailImage = thumbnailUrl;
                showFileUpload = false;
                IsFileTooBig = false;
            }
            else
            {
                IsFileTooBig = true;
            }
        }
    }

    private void RemoveThumbnail()
    {
        ThumbnailImage = null;
        Recipe.ThumbnailImage = null;
        showFileUpload = true;
    }

    private void ToggleRecipeDetailsSection()
    {
        RecipeDetailsSectionOpen = !RecipeDetailsSectionOpen;
        RecipeDetailsSectionIcon = RecipeDetailsSectionOpen ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill";
    }

    private void ToggleIngredientsSection()
    {
        IngredientsSectionOpen = !IngredientsSectionOpen;
        IngredientsSectionIcon = IngredientsSectionOpen ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill";
    }

    private void ToggleMoreInfoSection()
    {
        MoreInfoSectionOpen = !MoreInfoSectionOpen;
        MoreInfoSectionIcon = MoreInfoSectionOpen ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill";
    }

    private bool CreateNewRecipe()
    {
        isNameValid = !string.IsNullOrWhiteSpace(Recipe.Name);
        ValidateRecipeStory();
        ValidatePrepTime();
        ValidateCookTime();
        isIngredientsAdded = AddedIngredients.Count > 0;
        isInstructionsAdded = AddedInstructions.Count > 0;

        if (isNameValid && isStoryValid && isPrepValid && isCookTimeValid && isIngredientsAdded && isInstructionsAdded)
        {
            Recipe.DateCreated = DateTime.Now;
            return true;
        }
        return false;
    }

    private void ValidatePrepTime() => isPrepValid = Recipe.PrepTime > 0;
    private void ValidateCookTime() => isCookTimeValid = Recipe.CookTime > 0;
    private void ValidateIngredientName() => isIngNameValid = !string.IsNullOrWhiteSpace(NewIngredientName);
    private void ValidateIngredientQuantity() => isQuantityValid = !string.IsNullOrWhiteSpace(NewIngredientQuantity);
    private void ValidateInstruction() => isInstructionValid = !string.IsNullOrEmpty(NewInstructionText);
    private void ValidateRecipeName() => isNameValid = !string.IsNullOrEmpty(Recipe.Name);
    private void ValidateRecipeStory() => isStoryValid = !string.IsNullOrEmpty(Recipe.RecipeStory);

    async Task HandleSubmit()
    {
        // Fetch the current user
        var currentUser = await UserService.GetUserAsync();

        // Ensure a user is fetched before proceeding
        if (currentUser != null)
        {
            var ConfirmSubmit = CreateNewRecipe();
            if (!ConfirmSubmit)
            {
                return;
            }
            Recipe.Author = currentUser;

            foreach (var ingredient in AddedIngredients)
            {
                await RecipeService.AddIngredientToRecipeAsync(Recipe, ingredient.Name, ingredient.Quantity, ingredient.QuantityUnit, ingredient.ToGrams);
            }

            foreach (var instruction in AddedInstructions)
            {
                await RecipeService.AddInstructionToRecipeAsync(Recipe, instruction.InstructionText);
            }

            if (String.IsNullOrEmpty(Recipe.ThumbnailImage))
            {
                switch (Recipe.Category)
                {
                    case "Breakfast":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Breakfast.jpg";
                        break;

                    case "Lunch":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Lunch.jpg";
                        break;

                    case "Appetizer":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Appetizer.jpg";
                        break;

                    case "Dinner":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Dinner.jpg";
                        break;

                    case "Dessert":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Dessert.jpg";
                        break;

                    case "Snack":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Snack.jpeg";
                        break;

                    case "Beverage":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Beverage.jpg";
                        break;

                    case "Sauce":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Sauce.jpeg";
                        break;

                    case "Seasoning":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Seasoning.jpg";
                        break;

                    default:
                        break;
                }
            }

            await RecipeService.CreateRecipeAsync(Recipe);
            await RecipeService.AddRecipeAllergensAsync(Recipe.ID, selectedAllergens);
            await RecipeService.AddRecipeDietsAsync(Recipe.ID, selectedDiets);
            await RecipeService.AddRecipeNutritionAsync(Recipe.ID, Calories, Protein, Fat, Fiber, Sugar, Sodium, Calcium, Cholesterol, Iron, Potassium, TotalSatFat, TotalTransFat, VitaminA, VitaminC, Recipe.Servings, currentUser.UserName);
            Snackbar.Add("Recipe created successfully.", Severity.Success);
            NavigationManager.NavigateTo($"/recipes/{Recipe.ID}");
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
    }
}
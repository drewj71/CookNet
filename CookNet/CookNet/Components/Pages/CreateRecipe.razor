@page "/create-recipe"
@using CookNet.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.IO
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Create a Recipe</PageTitle>

<div class="create-recipe-container">
    <h3 class="create-recipe-title">Create a New Recipe</h3>
    <hr />
    <MudForm Model="@Recipe" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <div class="row">
            <div class="form-group col-md-6">
                <MudTextField T="string" Label="Recipe Name" @bind-Value="@Recipe.Name" Required="true" RequiredError="Recipe Name is required!" Variant="Variant.Outlined"
                    Error="@(!isNameValid)" ErrorText="Required" Immediate="true" @onblur="ValidateRecipeName" />
            </div>
            <div class="form-group col-md-6">
                <MudTextField T="string" Label="Description" @bind-Value="@Recipe.Description" Required="false" Variant="Variant.Outlined" />
            </div>
        </div>
        <div class="row d-flex">
            <div class="col-md-6 d-flex flex-column">
                @if (Recipe.ThumbnailImage != null)
                {
                    <MudImage Src="@Recipe.ThumbnailImage" Alt="Thumbnail Image" Class="mb-2"
                              Style="width: 400px; height: auto;" />
                    <div class="col-md-6 d-flex flex-column px-3">
                        <button class="btn btn-danger" type="button" @onclick="RemoveThumbnail">Remove</button>
                    </div>
                }

                @if (showFileUpload)
                {
                    <div class="thumbnailimg-input col-md-4">
                        <em><p class="thumbnailimg-help" style="@(IsFileTooBig ? "color: red;" : "")">Max file size: 5 MB</p></em>
                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleThumbnailImageSelected" MaximumFileCount="10">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Choose Image
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>
                }
            </div>
            <div class="col-md-6 d-flex flex-column">
                <MudTextField T="string" Label="Recipe Story" @bind-Value="@Recipe.RecipeStory" Lines="10" Required="true" RequiredError="Recipe Story is required!" Variant="Variant.Outlined"
                    Error="@(!isStoryValid)" ErrorText="Required" Immediate="true" @onblur="ValidateRecipeStory" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8 col-md-2 form-group">
                <MudNumericField T="int" Label="Prep Time" @bind-Value="@Recipe.PrepTime" Required="true" RequiredError="Prep time is required!" 
                    Variant="Variant.Outlined" Error="@(!isPrepValid)" ErrorText="Required" Immediate="true" @onblur="ValidatePrepTime" />
            </div>
            <div class="col-sm-8 col-md-2 form-group">
                <MudNumericField T="int" Label="Cook Time" @bind-Value="@Recipe.CookTime" Required="true" RequiredError="Cook time is required!"
                    Variant="Variant.Outlined" Error="@(!isCookTimeValid)" ErrorText="Required" Immediate="true" @onblur="ValidateCookTime" />

            </div>
            <div class="col-sm-8 col-md-2 form-group">
                <MudNumericField T="int?" Label="Serving Size" @bind-Value="@Recipe.Servings" Required="false" Variant="Variant.Outlined" />
            </div>
            <div class="col-sm-8 col-md-3 form-group">
                <MudSelect T="string" @bind-Value="@Recipe.Category" Label="Select a Category" Placeholder="Category"
                           Variant="Variant.Outlined" Clearable="true">
                    @if (RecipeCategories != null)
                    {
                        @foreach (var cat in RecipeCategories)
                        {
                            <MudSelectItem Value="@(cat.CategoryName)">@cat.CategoryName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
            <div class="col-sm-8 col-md-3 form-group">
                <MudSelect T="string" @bind-Value="@Recipe.Ethnicity" Label="Select an Ethnicity" Placeholder="Ethnicity"
                           Variant="Variant.Outlined" Clearable="true">
                    @if (RecipeEthnicities != null)
                    {
                        @foreach (var eth in RecipeEthnicities)
                        {
                            <MudSelectItem Value="@(eth.EthnicityName)">@eth.EthnicityName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-5 form-group">
                        <MudTextField T="string" Label="Ingredient Name" @bind-Value="@NewIngredientName" Variant="Variant.Outlined"
                            Error="@(!isIngNameValid || !isIngredientsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateIngredientName" />
                    </div>
                    <div class="col-md-2 form-group">
                        <MudTextField T="string" Label="Quantity" @bind-Value="@NewIngredientQuantity" Variant="Variant.Outlined" 
                            Error="@(!isQuantityValid || !isIngredientsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateIngredientQuantity" />
                    </div>
                    <div class="col-md-2 form-group">
                        <MudTextField T="string" Label="Unit" @bind-Value="@NewIngredientQuantityUnit" Variant="Variant.Outlined" />
                    </div>
                    <div class="col-md-3 add-ingredient-btn">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddIngredientAsync">Add Ingredient</MudButton>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-9 form-group">
                        <MudTextField T="string" Label="Instruction" @bind-Value="@NewInstructionText" Variant="Variant.Outlined" 
                            Error="@(!isInstructionValid || !isInstructionsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateInstruction" />
                    </div>
                    <div class="col-md-3 add-instruction-btn">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddInstructionAsync">Add Instruction</MudButton>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @if (AddedIngredients.Any())
                {
                    <div style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px; border-radius: 5px;">
                        <h4>Added Ingredients:</h4>
                        <ul class="list-unstyled">
                            @foreach (var ingredient in AddedIngredients)
                            {
                                <li>
                                    <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveIngredient(ingredient)"></i>
                                    <span class="ingredient-span">@($"{ingredient.Quantity} {ingredient.QuantityUnit} {ingredient.Name}")</span>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <div class="col-md-6">
                @if (AddedInstructions.Any())
                {
                    <div style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px;">
                        <h4>Added Instructions:</h4>
                        <ul class="list-unstyled">
                            @foreach (var instruction in AddedInstructions)
                            {
                                <li>
                                    <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveInstruction(instruction)"></i>
                                    <span class="ingredient-span">@($"{instruction.InstructionText}")</span>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-12 mt-3">
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="HandleSubmit">Submit</MudButton>
        </div>
    </MudForm>
</div>

@code {
    MudForm form;
    bool success;
    string[] errors = { };

    private Recipe Recipe { get; set; } = new Recipe();
    private string NewIngredientName { get; set; } = "";
    private string NewIngredientQuantity { get; set; } = "";
    private string? NewIngredientQuantityUnit { get; set; }
    private string NewInstructionText { get; set; } = "";
    private string? NewRecipeStory { get; set; }
    private string UserId { get; set; }
    List<Ingredient> AddedIngredients { get; set; } = new();
    List<Instruction> AddedInstructions { get; set; } = new();
    List<RecipeStory> AddedRecipeStory { get; set; } = new();
    private IBrowserFile? ThumbnailImage;
    private bool showFileUpload = true;
    private bool isNameValid = true;
    private bool isDescriptionValid = true;
    private bool isPrepValid = true;
    private bool isCookTimeValid = true;
    private bool isCategoryValid = true;
    private bool isEthnicityValid = true;
    private bool isIngNameValid = true;
    private bool isQuantityValid = true;
    private bool isInstructionValid = true;
    private bool isStoryValid = true;
    private bool isIngredientsAdded = true;
    private bool isInstructionsAdded = true;
    private List<RecipeCategory> RecipeCategories;
    private List<RecipeEthnicity> RecipeEthnicities;
    private bool IsFileTooBig = false;

    protected override async void OnInitialized()
    {
        Recipe = new Recipe();
        AddedIngredients = new List<Ingredient>();
        AddedInstructions = new List<Instruction>();
        AddedRecipeStory = new List<RecipeStory>();
    }

    protected override async Task OnInitializedAsync()
    {
        RecipeCategories = await RecipeService.GetActiveRecipeCategories();
        RecipeEthnicities = await RecipeService.GetActiveRecipeEthnicities();
    }

    private string GetInputStyle(string value, bool isValid)
    {
        return string.IsNullOrWhiteSpace(value) && !isValid ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private string GetInputStyleInt(int value, bool isValid)
    {
        return value <= 0 && !isValid ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private string GetInputStyleDDL(string value, bool isValid)
    {
        return !isValid && (value == "Select One" || string.IsNullOrEmpty(value)) ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private async Task AddIngredientAsync()
    {
        ValidateIngredientName();
        ValidateIngredientQuantity();
        if (isIngNameValid && isQuantityValid)
        {
            AddedIngredients.Add(new Ingredient
            {
                Name = NewIngredientName,
                Quantity = NewIngredientQuantity,
                QuantityUnit = NewIngredientQuantityUnit
            });

            NewIngredientName = string.Empty;
            NewIngredientQuantity = string.Empty;
            NewIngredientQuantityUnit = string.Empty;
        }
    }

    private async Task AddInstructionAsync()
    {
        ValidateInstruction();
        if (isInstructionValid)
        {
            AddedInstructions.Add(new Instruction
            {
                InstructionText = NewInstructionText
            });

            NewInstructionText = string.Empty;
        }
    }

    async void RemoveIngredient(Ingredient ingredient)
    {
        AddedIngredients.Remove(ingredient);
    }

    async void RemoveInstruction(Instruction instruction)
    {
        AddedInstructions.Remove(instruction);
    }

    private async Task HandleThumbnailImageSelected(IBrowserFile file)
    {
        if (file != null)
        {
            ThumbnailImage = file;
            var thumbnailUrl = await RecipeService.UploadImageAsync(ThumbnailImage);
            if (!string.IsNullOrEmpty(thumbnailUrl))
            {
                Recipe.ThumbnailImage = thumbnailUrl;
                showFileUpload = false;
                IsFileTooBig = false;
            }
            else
            {
                IsFileTooBig = true;
            }
        }
    }

    private void RemoveThumbnail()
    {
        ThumbnailImage = null;
        Recipe.ThumbnailImage = null;
        showFileUpload = true;
    }

    private bool CreateNewRecipe()
    {
        isNameValid = !string.IsNullOrWhiteSpace(Recipe.Name);
        ValidateRecipeStory();
        ValidatePrepTime();
        ValidateCookTime();
        isIngredientsAdded = AddedIngredients.Count > 0;
        isInstructionsAdded = AddedInstructions.Count > 0;

        if (isNameValid && isStoryValid && isPrepValid && isCookTimeValid && isIngredientsAdded && isInstructionsAdded)
        {
            Recipe.DateCreated = DateTime.Now;
            Recipe.RecipeStory = NewRecipeStory ?? "";
            return true;
        }
        return false;
    }

    private void ValidatePrepTime() => isPrepValid = Recipe.PrepTime > 0;
    private void ValidateCookTime() => isCookTimeValid = Recipe.CookTime > 0;
    private void ValidateIngredientName() => isIngNameValid = !string.IsNullOrWhiteSpace(NewIngredientName);
    private void ValidateIngredientQuantity() => isQuantityValid = !string.IsNullOrWhiteSpace(NewIngredientQuantity);
    private void ValidateInstruction() => isInstructionValid = !string.IsNullOrEmpty(NewInstructionText);
    private void ValidateRecipeName() => isNameValid = !string.IsNullOrEmpty(Recipe.Name);
    private void ValidateRecipeStory() => isStoryValid = !string.IsNullOrEmpty(Recipe.RecipeStory);

    async Task HandleSubmit()
    {
        // Fetch the current user
        var currentUser = await UserService.GetUserAsync();

        // Ensure a user is fetched before proceeding
        if (currentUser != null)
        {
            var ConfirmSubmit = CreateNewRecipe();
            if (!ConfirmSubmit)
            {
                return;
            }
            Recipe.Author = currentUser;

            foreach (var ingredient in AddedIngredients)
            {
                await RecipeService.AddIngredientToRecipeAsync(Recipe, ingredient.Name, ingredient.Quantity, ingredient.QuantityUnit);
            }

            foreach (var instruction in AddedInstructions)
            {
                await RecipeService.AddInstructionToRecipeAsync(Recipe, instruction.InstructionText);
            }

            if (String.IsNullOrEmpty(Recipe.ThumbnailImage))
            {
                switch (Recipe.Category)
                {
                    case "Breakfast":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Breakfast.jpg";
                        break;

                    case "Lunch":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Lunch.jpg";
                        break;

                    case "Appetizer":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Appetizer.jpg";
                        break;

                    case "Dinner":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Dinner.jpg";
                        break;

                    case "Dessert":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Dessert.jpg";
                        break;

                    case "Snack":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Snack.jpeg";
                        break;

                    case "Beverage":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Beverage.jpg";
                        break;

                    case "Sauce":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Sauce.jpeg";
                        break;

                    case "Seasoning":
                        Recipe.ThumbnailImage = "DefaultRecipesImages\\Seasoning.jpg";
                        break;

                    default:
                        break;
                }
            }

            await RecipeService.CreateRecipeAsync(Recipe);
            Snackbar.Add("Recipe created successfully.", Severity.Success);
            NavigationManager.NavigateTo($"/recipes/{Recipe.ID}");
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
    }
}
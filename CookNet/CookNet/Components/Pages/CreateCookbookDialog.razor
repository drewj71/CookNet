@using CookNet.Data
@using MudBlazor
@inject CookbookService CookbookService

<EditForm Model="@cookbook" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <h5 class="text-center">Create CookBook</h5>
        </TitleContent>
        <DialogContent>
                <div class="coverimg-container text-center py-2">
                    @* <div class="coverimg-title col-md-12 pb-2">
                        <p class="cookbookCoverImg">Cover Image</p>
                    </div> *@
                    <div class="coverimg-preview">
                        @if (cookbook.CoverImage != null)
                        {
                            <MudImage Src="@cookbook.CoverImage" Alt="Cover Image" Class="mb-2"
                                      Style="width: 200px; height: auto;" />
                                      <br />
                            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="RemoveCoverImage">Remove</MudButton>
                        }
                    </div>
                    @if (ShowFileUpload)
                    {
                        <div class="coverimg-input col-md-12">
                            <em><p class="coverimg-help m-0" style="@(IsFileTooBig ? "color: red;" : "")">Max file size: 5 MB</p></em>
                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleCoverImageSelected" MaximumFileCount="1">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Choose Image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                        </div>
                    }
                </div>
                <div class="cookbookname-container py-2">
                    <MudTextField Label="Name" Placeholder="Fall Recipes" HelperText="Required" @bind-Value="cookbook.CookbookName" For="@(() => cookbook.CookbookName)" Required="true" />
                </div>
                <div class="cookbookdesc-container py-2">
                    <MudTextField Label="Cookbook Description" Placeholder="Collection of the best fall recipes!" @bind-Value="cookbook.CookbookDescription" Multiline="true" Rows="3" />
                </div>
                <div class="ispublic-container mt-2 text-center">
                    <p class="ispublic-msg">Do you want this CookBook to be public?</p>
                    <MudSwitch T="bool" Color="Color.Primary" @onclick="SetCookbookPublic" />
                </div>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [Parameter] public string UserID { get; set; }

    [Parameter] public EventCallback OnCreatedCallback { get; set; }

    private UserCookbook cookbook = new UserCookbook();
    private IBrowserFile? CoverImage;
    private bool ShowFileUpload = true;
    private bool IsPublic = false;
    private bool IsFileTooBig = false;

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleCoverImageSelected(IBrowserFile file)
    {
        if (file != null)
        {
            CoverImage = file;
            var thumbnailUrl = await CookbookService.UploadImageAsync(CoverImage);
            if (!string.IsNullOrEmpty(thumbnailUrl))
            {
                cookbook.CoverImage = thumbnailUrl;
                ShowFileUpload = false;
            }
            else
            {
                IsFileTooBig = true;
            }
        }
    }

    private void RemoveCoverImage()
    {
        CoverImage = null;
        cookbook.CoverImage = null;
        ShowFileUpload = true;
    }

    private void SetCookbookPublic() => IsPublic = !IsPublic;

    private async Task OnValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(cookbook.CookbookName))
        {
            cookbook.DateCreated = DateTime.UtcNow;
            cookbook.DateUpdated = DateTime.UtcNow;
            cookbook.UserID = UserID;
            cookbook.IsPublic = IsPublic;
            await CookbookService.CreateCookbookAsync(cookbook);
            if (OnCreatedCallback.HasDelegate)
            {
                await OnCreatedCallback.InvokeAsync(null);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
    }
}

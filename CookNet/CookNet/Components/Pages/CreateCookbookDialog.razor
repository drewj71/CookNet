@using CookNet.Data
@using MudBlazor
@inject CookbookService CookbookService

<MudDialog>
    <TitleContent>
        <h5 class="text-center">Create CookBook</h5>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@cookbook" OnValidSubmit="SaveNewCookbook">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="coverimg-container text-center py-2">
                <div class="coverimg-title col-md-12 pb-2">
                    <p class="cookbookCoverImg">Cover Image</p>
                </div>
                <div class="coverimg-preview">
                    @if (cookbook.CoverImage != null)
                    {
                        <MudImage Src="@cookbook.CoverImage" Alt="Cover Image" Class="mb-2"
                                  Style="width: 200px; height: auto;" />
                                  <br />
                        <button class="btn btn-danger mb-3" type="button" @onclick="RemoveCoverImage">Remove</button>
                    }
                </div>
                @if (ShowFileUpload)
                {
                    <div class="coverimg-input col-md-12">
                        <em><p class="coverimg-help">Recommended file size: 1200 x 1800</p></em>
                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleCoverImageSelected" MaximumFileCount="1">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Choose Image
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>
                }
            </div>
            <div class="cookbookname-container py-2">
                <MudTextField Label="Name" Placeholder="Fall Recipes" @bind-Value="cookbook.CookbookName" />
            </div>
            <div class="cookbookdesc-container py-2">
                <MudTextField Label="Cookbook Description" Placeholder="Collection of the best fall recipes!" @bind-Value="cookbook.CookbookDescription" Multiline="true" Rows="3" />
            </div>
            <div class="ispublic-container mt-2 text-center">
                <p class="ispublic-msg">Do you want this CookBook to be public?</p>
                <MudSwitch T="bool" Color="Color.Primary" @bind-Checked="cookbook.IsPublic" />
            </div>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveNewCookbook">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string UserID { get; set; }

    [Parameter] 
    public EventCallback OnCreatedCallback { get; set; }

    private UserCookbook cookbook = new UserCookbook();
    private IBrowserFile? CoverImage;
    private bool ShowFileUpload = true;
    private bool IsPublic = false;

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleCoverImageSelected(IBrowserFile file)
    {
        if (file != null)
        {
            CoverImage = file;
            var thumbnailUrl = await CookbookService.UploadImageAsync(CoverImage);
            cookbook.CoverImage = thumbnailUrl;
            ShowFileUpload = false;
        }
    }

    private void RemoveCoverImage()
    {
        CoverImage = null;
        cookbook.CoverImage = null;
        ShowFileUpload = true;
    }

    private void SetCookbookPublic() => IsPublic = true;

    private async Task SaveNewCookbook()
    {
        cookbook.DateCreated = DateTime.Now;
        cookbook.DateUpdated = DateTime.Now;
        cookbook.UserID = UserID;
        await CookbookService.CreateCookbookAsync(cookbook);
        if (OnCreatedCallback.HasDelegate)
        {
            await OnCreatedCallback.InvokeAsync(null);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
}

@page "/"
@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject RecipeService RecipeService
@inject CookbookService CookbookService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Home</PageTitle>

<div class="header-container">
    <div class="header" style="color: white;">
        <div class="img-container position-relative text-center">
            <img src="CookNetHeader.jpg" class="main-img img-fluid opacity-75" alt="CookNet Home" />
            <div class="overlay-text position-absolute top-0 start-0 w-100 h-100 bg-black opacity-50"></div>
            <div class="overlay-text position-absolute top-50 start-50 translate-middle">
                <h1 class="main-text" style="font-size:7rem;">CookNet</h1> <br />
                <p class="main-desc fs-4">CookNet - Home of recipes and more!</p>
            </div>
        </div>
    </div>
</div>

<div class="divider-row"></div>

<div class="maincontent-container">
    <div class="recentrecipes-container px-5">
        <div class="recentrecipes-title">
            <h1 class="recent-header">Most Recent Recipes</h1>
        </div>
        <div class="recentrecipes-cards">
            @if (MostRecentRecipes == null)
            {
                <p>No Recent Recipes to Display</p>
            }
            else
            {
                <RecipeCards Recipes="MostRecentRecipes" OnBookmarkClicked="OpenCookbookDialogAsync" />
            }
        </div>
    </div>

    <div class="top10recipes-container px-5">
        <div class="top10recipes-title">
            <h1 class="top10-header">Top 10 Recipes of the Week</h1>
        </div>
        <div class="top10recipes-cards">
        </div>
    </div>
</div>

@code {
    private List<Recipe> MostRecentRecipes;
    private List<Recipe> Top10Recipes;
    private List<UserCookbook> UserCookbooks;
    private string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user != null)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        MostRecentRecipes = await RecipeService.GetMostRecentRecipesAsync();
        if (userId != null)
        {
            await LoadUserCookbooks();
        }
    }

    private async Task LoadUserCookbooks()
    {
        UserCookbooks = await CookbookService.GetCookbooksByUserIdAsync(userId);
        StateHasChanged();
    }

    private async Task OpenCookbookDialogAsync(int recipeId)
    {
        var parameters = new DialogParameters
        {
            { "UserCookbooks", UserCookbooks },
            { "RecipeID", recipeId },
            { "UserID" , userId },
            { "RefreshCookbooksCallback", EventCallback.Factory.Create(this, LoadUserCookbooks) }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var dialog = await DialogService.ShowAsync<AddCookbookDialog>("Add to CookBook", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Recipe added successfully!", Severity.Success);
        }
    }
}
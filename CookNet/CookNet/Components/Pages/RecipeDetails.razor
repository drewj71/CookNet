@page "/recipes/{RecipeId}"
@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@rendermode InteractiveServer

<div class="recipedetails-container">
    @if (Recipe != null)
    {
        <PageTitle>@Recipe.Name</PageTitle>
        <div>
            <h4 class="recipe-title">@Recipe.Name</h4>

            <p class="recipe-author">Author: <a class="text-decoration-none" href=@($"/users/{AuthorUserName}")>@("@")@AuthorUserName</a></p>

            <div class="center-container">
                <p class="recipe-preptime">Prep Time: @Recipe.PrepTime mins</p>
                <p class="recipe-cooktime">Cook Time: @Recipe.CookTime mins</p>
                <p class="recipe-category">Category: @Recipe.Category</p>
                @if (Recipe.Ethnicity != "NA")
                {
                    <p class="recipe-ethnicity">Ethnicity: @Recipe.Ethnicity</p>
                }
                else
                {
                    <p class="recipe-ethnicity">Ethnicity: N/A</p>
                }
            </div>

            @if (IsUserAuthor)
            {
                <button class="btn btn-primary edit-button" @onclick="() => EditRecipe(Recipe.ID)">Edit</button>
            }

            <img src="@Recipe.ThumbnailImage" alt="RecipeThumbnail" class="img-fluid border rounded shadow m-2 p-2 recipe-thumbnail">
            <p class="recipe-description">@Recipe.Description</p>

            @if (Recipe.RecipeStory != null)
            {
                <h4 class="recipe-story-title">Recipe Story:</h4>
                <p class="recipe-story">@($"{Recipe.RecipeStory}")</p>
            }

            <h4 class="recipe-ingredients-title">Ingredients:</h4>
            <ul class="ingredients-list">
                @foreach (var ingredient in @RecipeIngredients)
                {
                    <li class="recipe-ingredients">@($"{ingredient.Quantity} {ingredient.QuantityUnit} {ingredient.Name}")</li>
                }
            </ul>

            <h4 class="recipe-instructions-title">Instructions:</h4>
            <ul class="list-unstyled">
                @foreach (var instruction in @Instructions)
                {
                    <li class="recipe-instructions">@($"{instruction.StepNumber}. {instruction.InstructionText}")</li>
                }
            </ul>
        </div>
    }
    else
    {
        <PageTitle>Invalid Recipe</PageTitle>
        <p>Recipe not found...</p>
    }
</div>

@code {
    [Inject]
    private UserManager<ApplicationUser> UserManager { get; set; }

    private Recipe Recipe;
    private List<Ingredient> RecipeIngredients = [];
    private List<Instruction> Instructions = [];
    private string AuthorUserName;
    private bool IsUserAuthor = false;

    [Parameter]
    public string RecipeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(RecipeId, out int recipeId))
        {
            Recipe = await RecipeService.GetRecipeByIdAsync(recipeId);

            if (Recipe != null)
            {
                // Fetch the author's username using the Recipe's AuthorID
                var author = await UserManager.FindByIdAsync(Recipe.AuthorID);
                AuthorUserName = author?.UserName ?? "Anonymous";

                // Check if the current user is the author
                var currentUser = await UserService.GetUserAsync();
                if (currentUser != null && currentUser.Id == Recipe.AuthorID)
                {
                    IsUserAuthor = true;
                }

                RecipeIngredients = await RecipeService.GetIngredientsByRecipeIdAsync(recipeId);
                Instructions = await RecipeService.GetInstructionsByRecipeIdAsync(recipeId);
            }
        }
    }


    private void EditRecipe(int recipeId)
    {
        NavigationManager.NavigateTo($"/edit-recipe/{recipeId}");
    }
}

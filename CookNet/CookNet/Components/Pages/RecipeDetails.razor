@page "/recipes/{RecipeId}"
@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@inject RecipeService RecipeService
@inject CookbookService CookbookService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<div class="recipedetails-container">
    @if (Recipe != null)
    {
        <PageTitle>@Recipe.Name</PageTitle>
        <MudGrid Justify="Justify.Center" Spacing="0">
            <MudItem xs="12" sm="6" md="4">
                <div class="d-flex justify-content-center align-items-center w-100 mt-5 shadow-lg">
                    <MudImage Src="@Recipe.ThumbnailImage" Alt="@Recipe.Name" Elevation="25" Width="960" Height="540" />
                </div>
            </MudItem>
        </MudGrid>

        <div class="recipe-details">
            <h4 class="recipe-title">@Recipe.Name</h4>
            <p class="recipe-author">@Recipe.DateCreated.ToString("MMMM dd, yyyy") by <a class="text-decoration-none" href=@($"/users/{AuthorUserName}")>@("@")@AuthorUserName</a></p>

            @if (IsUserAuthor)
            {
                <div class="d-flex justify-content-center align-items-center mt-1">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => EditRecipe(Recipe.ID)">Edit Recipe</MudButton>
                </div>
            }

            @* ADD LIKE, SHARE, AND BOOKMARK *@
            <div class="row justify-content-center align-items-center text-center mb-3 mt-2 gap-3">
                <div class="col-auto d-flex flex-column align-items-center" style="margin-top: 7px;">
                    <MudIcon Icon="@((IsRecipeLiked) ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder)" Title="Favorite"
                             Color="@((IsRecipeLiked) ? Color.Error : Color.Dark)" @onclick="ToggleLike" Style="font-size: 3rem; cursor: pointer; padding-bottom:5px;" />
                    <p class="text-muted mb-0 mt-2">@LikeCount Likes</p>
                </div>
                <div class="col-auto d-flex flex-column align-items-center">
                    <button class="bookmark-recipe pb-1" @onclick="@(async () => await OpenCookbookDialogAsync(Recipe.ID))" title="Save to Cookbook">
                        <i class="cookbooks-icon bi bi-journal-bookmark-fill" style="font-size: 2rem; cursor: pointer;"></i>
                    </button>
                    <p class="text-muted mb-0 mt-2">@CookbookCount Saves</p>
                </div>
            </div>

            <div class="share-btns-inline row justify-content-center align-items-center gap-2">
                <div class="share-x col-auto" @onclick="ShareToTwitter">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-twitter-x" viewBox="0 0 16 16">
                        <path d="M12.6.75h2.454l-5.36 6.142L16 15.25h-4.937l-3.867-5.07-4.425 5.07H.316l5.733-6.57L0 .75h5.063l3.495 4.633L12.601.75Zm-.86 13.028h1.36L4.323 2.145H2.865z" />
                    </svg>
                    <label class="share-label">Tweet</label>
                </div>
                <div class="share-facebook col-auto" @onclick="ShareToFacebook">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-facebook" viewBox="0 0 16 16">
                        <path d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951" />
                    </svg>
                    <label class="share-label">Share</label>
                </div>
                <div class="share-email col-auto" @onclick="ShareViaEmail">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                        <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414zM0 4.697v7.104l5.803-3.558zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586zm3.436-.586L16 11.801V4.697z" />
                    </svg>
                    <label class="share-label">Email</label>
                </div>
                <div class="share-link col-auto" @onclick="CopyToClipboard">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-link" viewBox="0 0 16 16">
                        <path d="M6.354 5.5H4a3 3 0 0 0 0 6h3a3 3 0 0 0 2.83-4H9q-.13 0-.25.031A2 2 0 0 1 7 10.5H4a2 2 0 1 1 0-4h1.535c.218-.376.495-.714.82-1z" />
                        <path d="M9 5.5a3 3 0 0 0-2.83 4h1.098A2 2 0 0 1 9 6.5h3a2 2 0 1 1 0 4h-1.535a4 4 0 0 1-.82 1H12a3 3 0 1 0 0-6z" />
                    </svg>
                    <label class="share-label">Copy Link</label>
                </div>
            </div>

            <p class="recipe-description mt-2">@Recipe.Description</p>
            <div class="divider-line"></div>

            <div class="recipe-details-body">
                @if (Recipe.RecipeStory != null)
                {
                    <div class="d-flex justify-content-center">
                        <div class="col-md-8">
                            <p class="recipe-story pt-3">@($"{Recipe.RecipeStory}")</p>
                        </div>
                    </div>
                }

                <div class="d-flex justify-content-center" id="full-recipe-card">
                    <div class="card mb-4 col-md-10 col-lg-8">
                        <div class="card-header">
                            <div class="card-top d-flex align-items-center">
                                <div class="col-1"></div>
                                <div class="col text-center recipename-container">
                                    <h5 class="card-title" style="@IsServingNull">@Recipe.Name</h5>
                                </div>
                                <div class="col-auto text-end">
                                    @if (Recipe.Servings != null)
                                    {
                                        <p class="recipe-serving-size"><strong>Serving Size:</strong> @Recipe.Servings</p>
                                    }
                                </div>
                            </div>
                            <div class="card-cook text-center">
                                <p class="recipe-author-card">@Recipe.DateCreated.ToString("MMMM dd, yyyy") by <a class="author-card text-decoration-none" href=@($"/users/{AuthorUserName}")>@("@")@AuthorUserName</a></p>
                            </div>
                            <div class="card-btns d-flex justify-content-center align-items-center">
                                <div class="col-2">
                                    <MudButton Color="Color.Secondary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download">Download</MudButton>
                                </div>
                                <div class="col-2">
                                    <MudButton Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" OnClick="PrintRecipe">Print Card</MudButton>
                                </div>
                            </div>
                            <div class="card-info col-md-12 justify-content-center d-flex flex-wrap text-center mt-5">
                                <p class="recipe-preptime"><strong>Prep Time:</strong> @Recipe.PrepTime mins</p>
                                <p class="recipe-cooktime"><strong>Cook Time:</strong> @Recipe.CookTime mins</p>
                                <p class="recipe-category"><strong>Category:</strong> @Recipe.Category</p>
                                @if (Recipe.Ethnicity != null && Recipe.Ethnicity != "")
                                {
                                    <p class="recipe-ethnicity"><strong>Ethnicity:</strong> @Recipe.Ethnicity</p>
                                }
                            </div>
                            <div class="card-diets col-md-12 justify-content-center d-flex flex-wrap text-center gap-3">
                                @if (Diets.Count > 0)
                                {
                                    @foreach (var diet in Diets)
                                    {
                                        <p class="recipe-diet"><strong>@diet</strong></p>
                                    }
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row text-start">
                                <div class="ingredients-col col-md-6">
                                    <h4 class="recipe-ingredients-title">Ingredients:</h4>
                                    <ul class="ingredients-list list-unstyled">
                                        @foreach (var ingredient in @RecipeIngredients)
                                        {
                                            <li class="recipe-ingredients">@($"{ingredient.Quantity} {ingredient.QuantityUnit} {ingredient.Name}")</li>
                                        }
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <h4 class="recipe-instructions-title">Instructions:</h4>
                                    <ul class="instructions-list list-unstyled">
                                        @foreach (var instruction in @Instructions)
                                        {
                                            <li class="recipe-instructions">@($"{instruction.StepNumber}. {instruction.InstructionText}")</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="card-nutrition">
                                <h4 class="nutrition-title mt-3">Nutritional Information</h4>
                                @if (Nutrition != null && Units != null)
                                {
                                    <span class="nutrition-info-span calories-nutrition">@(Nutrition.Calories > 0 ? (MarkupString)$"<b>Calories:</b> {Math.Round(Nutrition.Calories, 2)}" : null) @(Nutrition.Calories > 0 ? Units.CaloriesUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Calories > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span carbs-nutrition">@(Nutrition.Carbohydrates > 0 ? (MarkupString)$"<b>Carbohydrates:</b> {Math.Round(Nutrition.Carbohydrates, 2)}" : null) @(Nutrition.Carbohydrates > 0 ? Units.CarbsUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Carbohydrates > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span protein-nutrition">@(Nutrition.Protein > 0 ? (MarkupString)$"<b>Protein:</b> {Math.Round(Nutrition.Protein, 2)}" : null) @(Nutrition.Protein > 0 ? Units.ProteinUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Protein > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span fat-nutrition">@(Nutrition.Fats > 0 ? (MarkupString)$"<b>Fat:</b> {Math.Round(Nutrition.Fats, 2)}" : null) @(Nutrition.Fats > 0 ? Units.FatsUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Fats > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span totaltrans-nutrition">@(Nutrition.TransFat > 0 ? (MarkupString)$"<b>Trans Fat:</b> {Math.Round(Nutrition.TransFat, 2)}" : null) @(Nutrition.TransFat > 0 ? Units.TransFatUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.TransFat > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span totalsatfat-nutrition">@(Nutrition.SatFat > 0 ? (MarkupString)$"<b>Saturated Fat:</b> {Math.Round(Nutrition.SatFat, 2)}" : null) @(Nutrition.SatFat > 0 ? Units.SatFatUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.SatFat > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span cholesterol-nutrition">@(Nutrition.Cholesterol > 0 ? (MarkupString)$"<b>Cholesterol:</b> {Math.Round(Nutrition.Cholesterol, 2)}" : null) @(Nutrition.Cholesterol > 0 ? Units.CholesterolUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Cholesterol > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span fiber-nutrition">@(Nutrition.Fiber > 0 ? (MarkupString)$"<b>Fiber:</b> {Math.Round(Nutrition.Fiber, 2)}" : null) @(Nutrition.Fiber > 0 ? Units.FiberUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Fiber > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span sugar-nutrition">@(Nutrition.Sugar > 0 ? (MarkupString)$"<b>Sugar:</b> {Math.Round(Nutrition.Sugar, 2)}" : null)  @(Nutrition.Sugar > 0 ? Units.SugarUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Sugar > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span calcium-nutrition">@(Nutrition.Calcium > 0 ? (MarkupString)$"<b>Calcium:</b> {Math.Round(Nutrition.Calcium, 2)}" : null) @(Nutrition.Calcium > 0 ? Units.CalciumUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Calcium > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span sodium-nutrition">@(Nutrition.Sodium > 0 ? (MarkupString)$"<b>Sodium:</b> {Math.Round(Nutrition.Sodium, 2)}" : null) @(Nutrition.Sodium > 0 ? Units.SodiumUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Sodium > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span iron-nutrition">@(Nutrition.Iron > 0 ? (MarkupString)$"<b>Iron:</b> {Math.Round(Nutrition.Iron, 2)}" : null) @(Nutrition.Iron > 0 ? Units.IronUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Iron > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span potassium-nutrition">@(Nutrition.Potassium > 0 ? (MarkupString)$"<b>Potassium:</b> {Math.Round(Nutrition.Potassium, 2)}" : null) @(Nutrition.Potassium > 0 ? Units.PotassiumUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.Potassium > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span vitamina-nutrition">@(Nutrition.VitaminA > 0 ? (MarkupString)$"<b>VitaminA:</b> {Math.Round(Nutrition.VitaminA, 2)}" : null) @(Nutrition.VitaminA > 0 ? Units.VitaminAUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.VitaminA > 0 ? " | " : "")</span>
                                    <span class="nutrition-info-span vitaminc-nutrition">@(Nutrition.VitaminC > 0 ? (MarkupString)$"<b>VitaminC:</b> {Math.Round(Nutrition.VitaminC, 2)}" : null) @(Nutrition.VitaminC > 0 ? Units.VitaminCUnit : "")</span>
                                    <span class="nutrition-info-span info-divider">@(Nutrition.VitaminC > 0 ? " | " : "")</span>
                                    <p class="nutrition-info-tooltip text-center mt-3 fst-italic">Nutritional Information is calculated automatically based on entered ingredients, it is only an approximation.</p>
                                }
                                else
                                {
                                    <p class="nutrition-null">There is no nutritional information to display.</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center mt-5">
                <div class="comments-section mb-4 col-md-10 col-lg-8">
                    <h4 class="comments-title">Leave a Comment</h4>
                    <div class="comment-form">
                        <MudTextField @bind-Value="NewCommentTxt" Placeholder="Add a comment..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="AddComment" Immediate="true" />
                    </div>
                    <div class="comments-list mt-3">
                        @if (Comments != null && Comments.Any())
                        {
                            @foreach (var comment in Comments.OrderBy(c => c.ParentCommentID))
                            {
                                @if (comment.ParentCommentID is null)
                                {
                                    <div class="comment-item">
                                        <div class="comment-header">
                                            <div>
                                                <a href=@($"/users/{comment.Username}")><strong class="username-comment">@comment.Username</strong></a> <span class="text-muted">@comment.DateCreated.ToString("MMMM dd, yyyy")</span>
                                            </div>
                                            <div class="comment-actions">
                                                <i class="fa fa-reply ms-2" @onclick="() => ToggleReply(comment.CommentID)" title="Reply"></i>
                                                @if (currentUser != null && comment.UserID == currentUser.Id)
                                                {
                                                    <i class="fa fa-pen" @onclick="() => OpenEditCommentDialog(comment.CommentID, comment.Comment)"></i>
                                                    <i class="fa-solid fa-trash-can ms-2" @onclick="() => DeleteComment(comment.CommentID)" title="Delete Comment"></i>
                                                }
                                            </div>
                                        </div>
                                        <div class="comment-body">
                                            @if (comment.IsDeleted)
                                            {
                                                <p class="text-muted"><em>This comment has been deleted.</em></p>
                                            }
                                            else
                                            {
                                                <p>@comment.Comment</p>
                                            }
                                            @if (IsReplying && CommentIDBeingReplied == comment.CommentID)
                                            {
                                                <div class="reply-input">
                                                    <MudTextField @bind-Value="NewReplyTxt" Placeholder="Write a reply..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="() => SubmitReply(comment.CommentID)" Immediate="true" />
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                @if (comment.Replies != null && comment.Replies.Any())
                                {
                                    @foreach (var reply in comment.Replies.OrderBy(r => r.DateCreated))
                                    {
                                        <div class="reply-item">
                                            <div class="reply-header">
                                                <div>
                                                    <a href=@($"/users/{reply.Username}")><strong class="username-comment">@reply.Username</strong></a> <span class="text-muted">@reply.DateCreated.ToString("MMMM dd, yyyy")</span>
                                                </div>
                                                <div class="comment-actions">
                                                    <i class="fa fa-reply ms-2" @onclick="() => ToggleReply(reply.CommentID)" title="Reply"></i>
                                                    @if (currentUser != null && reply.UserID == currentUser.Id)
                                                    {
                                                        <i class="fa fa-pen" @onclick="() => OpenEditCommentDialog(reply.CommentID, reply.Comment)"></i>
                                                        <i class="fa-solid fa-trash-can ms-2" @onclick="() => DeleteComment(reply.CommentID)" title="Delete Comment"></i>
                                                    }
                                                </div>
                                            </div>
                                            <div class="reply-body">
                                                @if (reply.IsDeleted)
                                                {
                                                    <p class="text-muted"><em>This comment has been deleted.</em></p>
                                                }
                                                else
                                                {
                                                    <p>@reply.Comment</p>
                                                }
                                                @if (IsReplying && CommentIDBeingReplied == reply.CommentID)
                                                {
                                                    <div class="reply-input">
                                                        <MudTextField @bind-Value="NewReplyTxt" Placeholder="Write a reply..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="() => SubmitReply(reply.ParentCommentID ?? reply.CommentID)" Immediate="true" />
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        }
                        else
                        {
                            <p>No comments yet. Be the first to comment!</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <PageTitle>Invalid Recipe</PageTitle>
        <p>Recipe not found...</p>
    }
</div>

@code {
    [Inject]
    private UserManager<ApplicationUser> UserManager { get; set; }

    private Recipe Recipe;
    private List<Ingredient> RecipeIngredients = [];
    private List<Instruction> Instructions = [];
    private List<UserCookbook> UserCookbooksList = new();
    private List<RecipeComment> Comments = new();
    private RecipeNutrition Nutrition = new();
    private NutritionUnits Units = new();
    private string Allergens { get; set; }
    private List<string> Diets = new();
    private ApplicationUser currentUser;
    private string AuthorUserName;
    private bool IsUserAuthor = false;
    private string IsServingNull = "";
    private bool IsRecipeLiked = false;
    private int LikeCount { get; set; } = 0;
    private int CookbookCount { get; set; } = 0;
    private string NewCommentTxt { get; set; }
    private string NewReplyTxt { get; set; }
    private bool IsReplying { get; set; } = false;
    private int CommentIDBeingReplied { get; set; }

    private bool IsRendered = false;
    private IJSObjectReference? module;

    [Parameter]
    public string RecipeId { get; set; }

    private string recipeURL = "https://cooknet.com/recipes/";
    private string shareURLTwitter = "";
    private string shareURLFacebook = "";
    private string shareEmailURL = "mailto:?subject=Check%20this%20recipe%20out%20on%20CookNet!&body=Hi%20there,%0A%0AI%20found%20this%20great%20recipe%20and%20thought%20you%20might%20like%20it:%20https://example.com%0A%0AEnjoy!";
    private string shareText = "Check this recipe out on CookNet!";

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(RecipeId, out int recipeId))
        {
            Recipe = await RecipeService.GetRecipeByIdAsync(recipeId);

            if (Recipe != null)
            {
                // Fetch the author's username using the Recipe's AuthorID
                var author = await UserManager.FindByIdAsync(Recipe.AuthorID);
                AuthorUserName = author?.UserName ?? "Anonymous";

                // Check if the current user is the author
                currentUser = await UserService.GetUserAsync();
                if (currentUser != null && currentUser.Id == Recipe.AuthorID)
                {
                    IsUserAuthor = true;
                }

                RecipeIngredients = await RecipeService.GetIngredientsByRecipeIdAsync(recipeId);
                Instructions = await RecipeService.GetInstructionsByRecipeIdAsync(recipeId);

                if (Recipe.Servings == null)
                {
                    IsServingNull = "margin-left: 0; margin-right: 85px;";
                }
                if (currentUser != null)
                {
                    IsRecipeLiked = await RecipeService.IsRecipeLikedByUserAsync(recipeId, currentUser.Id);
                    await LoadUserCookbooks();
                }
                LikeCount = await RecipeService.GetLikeCountAsync(recipeId);
                CookbookCount = await RecipeService.GetCookbookSavesCount(recipeId);
                Comments = await RecipeService.GetCommentsByRecipeIdAsync(recipeId);
                Nutrition = await RecipeService.GetNutritionForRecipe(recipeId);
                Allergens = await RecipeService.GetAllergensForRecipe(recipeId);
                Diets = await RecipeService.GetDietsForRecipe(recipeId);
                Units = await RecipeService.GetNutritionUnits();
                shareURLTwitter = $"https://x.com/intent/tweet?url={recipeURL + RecipeId}&text={Uri.EscapeDataString(shareText)}";
                shareURLFacebook = $"https://www.facebook.com/sharer/sharer.php?u={recipeURL + RecipeId}&quote={Uri.EscapeDataString(shareText)}";
                shareEmailURL = $"mailto:?subject=Check%20this%20recipe%20out%20on%20CookNet!&body=Hi%20there,%0A%0AI%20found%20this%20great%20recipe%20and%20thought%20you%20might%20like%20it:%20{recipeURL + RecipeId}%0A%0AEnjoy!";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsRendered = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task PrintRecipe()
    {
        if (IsRendered)
        {
            await JSRuntime.InvokeVoidAsync("printRecipeCard");
        }
    }

    private async Task LoadUserCookbooks()
    {
        UserCookbooksList = await CookbookService.GetCookbooksByUserIdAsync(currentUser.Id);
        StateHasChanged();
    }

    private async Task OpenCookbookDialogAsync(int recipeId)
    {
        if (currentUser != null)
        {
            var parameters = new DialogParameters
        {
            { "UserCookbooks", UserCookbooksList },
            { "RecipeID", recipeId },
            { "UserID" , currentUser.Id },
            { "RefreshCookbooksCallback", EventCallback.Factory.Create(this, LoadUserCookbooks) }
        };

            var options = new DialogOptions
                {
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true
                };

            var dialog = await DialogService.ShowAsync<AddCookbookDialog>("Add to CookBook", parameters, options);
            var result = await dialog.Result;

            if (result != null && !result.Canceled)
            {
                Snackbar.Add("Recipe added successfully!", Severity.Success);
                CookbookCount = await RecipeService.GetCookbookSavesCount(recipeId);
                StateHasChanged();
            }
        }
        else
        {
            NavigationManager.NavigateTo($"/Account/Login");
        }
    }

    private void EditRecipe(int recipeId)
    {
        NavigationManager.NavigateTo($"/edit-recipe/{recipeId}");
    }

    private async void ToggleLike()
    {
        if (currentUser != null)
        {
            LikeCount = await RecipeService.ToggleLikeAsync(Recipe.ID, !IsRecipeLiked, currentUser.Id);
            IsRecipeLiked = !IsRecipeLiked;
            StateHasChanged();
        }
        else
        {
            NavigationManager.NavigateTo($"/Account/Login");
        }
    }

    private async void AddComment()
    {
        if (currentUser != null)
        {
            if (!string.IsNullOrWhiteSpace(NewCommentTxt))
            {
                var newComment = new RecipeComment
                    {
                        RecipeID = Recipe.ID,
                        UserID = currentUser.Id,
                        Comment = NewCommentTxt,
                        Username = currentUser.UserName,
                        DateCreated = DateTime.UtcNow,
                        DateUpdated = DateTime.UtcNow,
                        IsDeleted = false
                    };

                await RecipeService.AddCommentAsync(newComment);
                Comments.Add(newComment);
                NewCommentTxt = "";
                StateHasChanged();
            }
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
    }

    private async Task OpenEditCommentDialog(int commentId, string existingCommentText)
    {
        var parameters = new DialogParameters
        {
            { "CommentID", commentId },
            { "ExistingCommentText", existingCommentText }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<EditCommentDialog>("Edit Comment", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Refresh comments list or handle UI update if needed
            Comments = await RecipeService.GetCommentsByRecipeIdAsync(int.Parse(RecipeId));
            StateHasChanged();
        }
    }

    private void ToggleReply(int commentId)
    {
        var comment = Comments.FirstOrDefault(c => c.CommentID == commentId);
        if (comment != null)
        {
            IsReplying = !IsReplying;
            CommentIDBeingReplied = commentId;
        }
    }

    private async Task SubmitReply(int parentCommentId)
    {
        if (currentUser != null)
        {
            var parentComment = Comments.FirstOrDefault(c => c.CommentID == parentCommentId);
            if (parentComment != null && !string.IsNullOrWhiteSpace(NewReplyTxt))
            {
                var reply = new RecipeComment
                    {
                        RecipeID = Recipe.ID,
                        Comment = NewReplyTxt,
                        UserID = currentUser.Id,
                        Username = currentUser.UserName,
                        DateCreated = DateTime.UtcNow,
                        DateUpdated = DateTime.UtcNow,
                        ParentCommentID = parentCommentId,
                        IsDeleted = false
                    };

                await RecipeService.AddCommentAsync(reply);

                // Clear the reply field and refresh the comments
                NewReplyTxt = string.Empty;
                IsReplying = false;
                Comments = await RecipeService.GetCommentsByRecipeIdAsync(int.Parse(RecipeId));
                StateHasChanged();
            }
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }
    }

    private async void DeleteComment(int commentId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Comment",
            "Are you sure you want to delete this comment?",
            yesText: "Delete", cancelText: "Cancel");

        if (confirmed ?? false) // Explicit conversion to non-nullable boolean
        {
            bool hasReplies = await RecipeService.HasRepliesAsync(commentId);

            if (hasReplies)
            {
                await RecipeService.MarkCommentAsDeletedAsync(commentId);
                var comment = Comments.First(c => c.CommentID == commentId);
                comment.IsDeleted = true;
            }
            else
            {
                await RecipeService.DeleteCommentAsync(commentId);
                Comments.Remove(Comments.First(c => c.CommentID == commentId));
            }

            StateHasChanged();
        }
    }

    private void ShareToTwitter()
    {
        JSRuntime.InvokeVoidAsync("open", shareURLTwitter, "_blank");
    }

    private void ShareToFacebook()
    {
        JSRuntime.InvokeVoidAsync("open", shareURLFacebook, "_blank");
    }

    private void ShareViaEmail()
    {
        JSRuntime.InvokeVoidAsync("open", shareEmailURL);
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", recipeURL + RecipeId);
        Snackbar.Add("Link copied to clipboard!", Severity.Success);
    }
}

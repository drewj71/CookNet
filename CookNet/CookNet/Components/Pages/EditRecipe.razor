@page "/edit-recipe/{RecipeID:int}"
@using CookNet.Data
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject RecipeService RecipeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Edit Recipe</PageTitle>

<div class="edit-recipe-container">
    <div class="row">
        <div class="col-md-5">
            <h3><i class="bi bi-arrow-left-square-fill goback" @onclick="ReturnBack"></i></h3>
        </div>
        <div class="col-md-6">
            <h3 class="edit-recipe-title">Edit Recipe</h3>
        </div>
    </div>

    <MudForm Model="@Recipe" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <div class="row">
            <div class="col-md-6 form-group">
                <MudTextField T="string" Label="Recipe Name" @bind-Value="@RecipeName" Required="true" RequiredError="Recipe Name is required!" Variant="Variant.Outlined"
                    Error="@(!isNameValid)" ErrorText="Required" Immediate="true" @onblur="ValidateRecipeName" />
            </div>
            <div class="col-md-6 form-group">
                <MudTextField T="string" Label="Description" @bind-Value="@RecipeDescription" Required="false" Variant="Variant.Outlined" />
            </div>
        </div>
        <div class="row d-flex">
            <div class="col-md-6 d-flex flex-column">
                @if (Recipe.ThumbnailImage != null)
                {
                    <MudImage Src="@Recipe.ThumbnailImage" Alt="Thumbnail Image" Class="mb-2"
                              Style="width: 400px; height: auto;" />
                    <div class="col-md-6 d-flex flex-column px-3">
                        <button class="btn btn-danger" type="button" @onclick="RemoveThumbnail">Remove Thumbnail</button>
                    </div>
                }

                @if (showFileUpload)
                {
                    <div class="thumbnailimg-input col-md-4">
                        <em><p class="thumbnailimg-help" style="@(IsFileTooBig ? "color: red;" : "")">Max file size: 5 MB</p></em>
                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleThumbnailImageSelected" MaximumFileCount="10">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Choose Image
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>
                }
            </div>
            <div class="col-md-6 d-flex flex-column">
                <MudTextField T="string" Label="Recipe Story" @bind-Value="@RecipeStory" Lines="10" Required="true" RequiredError="Recipe Story is required!" Variant="Variant.Outlined"
                              Error="@(!isStoryValid)" ErrorText="Required" Immediate="true" @onblur="ValidateRecipeStory" />
            </div>
        </div>
        <div class="row my-3">
            <div class="col-sm-8 col-md-2 form-group">
                <MudNumericField T="int" Label="Prep Time" @bind-Value="@RecipePrepTime" Required="true" RequiredError="Prep time is required!"
                                 Variant="Variant.Outlined" Error="@(!isPrepValid)" ErrorText="Required" Immediate="true" @onblur="ValidatePrepTime" />
            </div>
            <div class="col-sm-8 col-md-2 form-group">
                <MudNumericField T="int" Label="Cook Time" @bind-Value="@RecipeCookTime" Required="true" RequiredError="Cook time is required!"
                                 Variant="Variant.Outlined" Error="@(!isCookTimeValid)" ErrorText="Required" Immediate="true" @onblur="ValidateCookTime" />

            </div>
            <div class="col-sm-8 col-md-2 form-group">
                <MudNumericField T="int?" Label="Serving Size" @bind-Value="@RecipeServings" Required="false" Variant="Variant.Outlined" />
            </div>
            <div class="col-sm-8 col-md-3 form-group">
                <MudSelect T="string" @bind-Value="@RecipeCategory" Label="Select a Category" Placeholder="Category"
                           Variant="Variant.Outlined" Clearable="true">
                    @if (RecipeCategories != null)
                    {
                        @foreach (var cat in RecipeCategories)
                        {
                            <MudSelectItem Value="@(cat.CategoryName)">@cat.CategoryName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
            <div class="col-sm-8 col-md-3 form-group">
                <MudSelect T="string" @bind-Value="@RecipeEthnicity" Label="Select an Ethnicity" Placeholder="Ethnicity"
                           Variant="Variant.Outlined" Clearable="true">
                    @if (RecipeEthnicities != null)
                    {
                        @foreach (var eth in RecipeEthnicities)
                        {
                            <MudSelectItem Value="@(eth.EthnicityName)">@eth.EthnicityName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
        </div>
        <div class="edit-section">
            <div class="col-md-6 edit-ingredients">
                <h4 class="col-md-6 edit-ingredients-title">Ingredients:</h4>
                @foreach (var ing in AllIngredients)
                {
                    var ingredient = ing.Ingredient;
                    <div class="col-md-12 ingredient-edit">
                        @if (ingredient != null)
                        {
                            @if (!ing.IsEditing)
                            {
                                <div>
                                    <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveIngredient(ing)"></i>
                                    <i class="edit-ingredient fa fa-pen" @onclick="() => EditIngredient(ing)"></i>
                                    <span>@ing.Quantity</span>
                                    <span>@ing.QuantityUnit</span>
                                    <span>@ingredient.Name</span>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-md-4">
                                        <MudTextField T="string" Label="Ingredient Name" @bind-Value="@ingredient.Name" Variant="Variant.Outlined"
                                                      Error="@(!isIngNameValid)" ErrorText="Required" Immediate="true" @onblur="@(() => ValidateIngEdit(ing))" />
                                    </div>
                                    <div class="col-md-2">
                                        <MudTextField T="string" Label="Quantity" @bind-Value="@ing.Quantity" Variant="Variant.Outlined"
                                                      Error="@(!isQuantityValid)" ErrorText="Required" Immediate="true" @onblur="@(() => ValidateIngQuantEdit(ing))" />
                                    </div>
                                    <div class="col-md-2">
                                        <MudTextField T="string" Label="Unit" @bind-Value="@ing.QuantityUnit" Variant="Variant.Outlined" />
                                    </div>
                                    <div class="col-md-3 save-cancel-btns">
                                        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="() => SaveIngredient(ing)">Save</MudButton>
                                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => CancelEditIngredient(ing)">Cancel</MudButton>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
            <div class="col-md-6 edit-instructions">
                <h4 class="col-md-6 edit-instructions-title">Instructions:</h4>
                @foreach (var instruction in AllInstructions)
                {
                    <div class="col-md-12 instruction-edit">
                        @if (!instruction.IsEditing)
                        {
                            <div>
                                <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveInstruction(instruction)"></i>
                                <i class="edit-ingredient fa fa-pen" @onclick="() => EditInstruction(instruction)"></i>
                                <span>@instruction.InstructionText</span>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-9">
                                    <MudTextField T="string" Label="Instruction" @bind-Value="@instruction.InstructionText" Variant="Variant.Outlined"
                                                  Error="@(!isInstructionValid)" ErrorText="Required" Immediate="true" @onblur="@(() => ValidateInstructEdit(instruction))" />
                                </div>
                                <div class="col-md-3 save-cancel-btns">
                                    <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="() => SaveInstruction(instruction)">Save</MudButton>
                                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => CancelEditInstruction(instruction)">Cancel</MudButton>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="col-md-12 row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-5">
                        <MudTextField T="string" Label="Ingredient Name" @bind-Value="@NewIngredientName" Variant="Variant.Outlined"
                                      Error="@(!isNewIngNameValid || !isIngredientsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateIngredientName" />
                    </div>
                    <div class="col-md-2">
                        <MudTextField T="string" Label="Quantity" @bind-Value="@NewIngredientQuantity" Variant="Variant.Outlined"
                                      Error="@(!isNewQuantityValid || !isIngredientsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateIngredientQuantity" />
                    </div>
                    <div class="col-md-2">
                        <MudTextField T="string" Label="Unit" @bind-Value="@NewIngredientQuantityUnit" Variant="Variant.Outlined" />
                    </div>
                    <div class="col-md-3 add-ingredient-btn">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddIngredientAsync">Add Ingredient</MudButton>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-9">
                        <MudTextField T="string" Label="Instruction" @bind-Value="@NewInstructionText" Variant="Variant.Outlined"
                                      Error="@(!isNewInstructionValid || !isInstructionsAdded)" ErrorText="Required" Immediate="true" @onblur="ValidateInstruction" />
                    </div>
                    <div class="col-md-3 add-instruction-btn">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddInstructionAsync">Add Instruction</MudButton>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12 confirmation-btns pt-3">
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="HandleSubmit">Save</MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ShowDeleteConfirmation">Delete Recipe</MudButton>
        </div>
    </MudForm>
</div>

@code {
    [Parameter]
    public int RecipeID { get; set; }

    MudForm form;
    bool success;
    string[] errors = { };

    private Recipe Recipe { get; set; } = new Recipe();
    private string RecipeName { get; set; }
    private string RecipeDescription { get; set; }
    private int RecipePrepTime { get; set; }
    private int RecipeCookTime { get; set; }
    private int? RecipeServings { get; set; } = 1;
    private string RecipeCategory { get; set; }
    private string RecipeEthnicity { get; set; }
    private string RecipeStory { get; set; }
    private bool ShowModal { get; set; } = false;
    private IBrowserFile? ThumbnailImage;
    private bool showFileUpload = true;
    private string NewIngredientName { get; set; }
    private string NewIngredientQuantity { get; set; }
    private string NewIngredientQuantityUnit { get; set; }
    private string NewInstructionText { get; set; }
    private bool isNameValid = true;
    private bool isDescriptionValid = true;
    private bool isPrepValid = true;
    private bool isCookTimeValid = true;
    private bool isCategoryValid = true;
    private bool isEthnicityValid = true;
    private bool isIngNameValid = true;
    private bool isQuantityValid = true;
    private bool isInstructionValid = true;
    private bool isNewIngNameValid = true;
    private bool isNewQuantityValid = true;
    private bool isNewInstructionValid = true;
    private string currentIngredientNameEdit;
    private string currentQuantityEdit;
    private string currentUnitEdit;
    private string currentInstructionEdit;
    private bool IsDefaultThumbnail = false;
    private bool isStoryValid = true;
    private bool isIngredientsAdded = true;
    private bool isInstructionsAdded = true;
    private bool IsFileTooBig = false;

    List<RecipeIngredient> AllIngredients { get; set; } = new();
    List<Instruction> AllInstructions { get; set; } = new();
    List<Ingredient> AddedIngredients { get; set; } = new();
    List<Instruction> AddedInstructions { get; set; } = new();
    List<RecipeCategory> RecipeCategories { get; set; } = new();
    List<RecipeEthnicity> RecipeEthnicities { get; set; } = new();

    List<string> defaultThumbnails = new List<string> 
    { 
        "DefaultRecipesImages\\Breakfast.jpg", "DefaultRecipesImages\\Lunch.jpg", "DefaultRecipesImages\\Appetizer.jpg",
        "DefaultRecipesImages\\Dinner.jpg", "DefaultRecipesImages\\Dessert.jpg", "DefaultRecipesImages\\Snack.jpeg",
        "DefaultRecipesImages\\Beverage.jpg", "DefaultRecipesImages\\Sauce.jpeg", "DefaultRecipesImages\\Seasoning.jpg"
    };

    protected override async Task OnInitializedAsync()
    {
        Recipe = await RecipeService.GetRecipeByIdAsync(RecipeID);
        AllIngredients = Recipe.RecipeIngredients.ToList();
        AllInstructions = Recipe.Instructions.ToList();
        RecipeCategories = await RecipeService.GetActiveRecipeCategories();
        RecipeEthnicities = await RecipeService.GetActiveRecipeEthnicities();
        if (Recipe != null)
        {
            RecipeName = Recipe.Name;
            RecipeDescription = Recipe.Description ?? "";
            RecipePrepTime = Recipe.PrepTime;
            RecipeCookTime = Recipe.CookTime;
            RecipeServings = Recipe.Servings;
            RecipeCategory = Recipe.Category ?? "";
            RecipeEthnicity = Recipe.Ethnicity ?? "";
            RecipeStory = Recipe.RecipeStory;
            if (Recipe.ThumbnailImage != null)
            {
                showFileUpload = false;
                IsDefaultThumbnail = defaultThumbnails.Contains(Recipe.ThumbnailImage) ? true : false;
            }
        }
    }

    private async Task AddIngredientAsync()
    {
        ValidateIngredientName();
        ValidateIngredientQuantity();
        if (isNewIngNameValid && isNewQuantityValid)
        {
            AddedIngredients.Add(new Ingredient
            {
                Name = NewIngredientName,
                Quantity = NewIngredientQuantity,
                QuantityUnit = NewIngredientQuantityUnit
            });

            var newIngredient = new Ingredient
            {
                Name = NewIngredientName
            };

            AllIngredients.Add(new RecipeIngredient
            {
                Ingredient = newIngredient,
                Quantity = NewIngredientQuantity,
                QuantityUnit = NewIngredientQuantityUnit
            });

            NewIngredientName = string.Empty;
            NewIngredientQuantity = string.Empty;
            NewIngredientQuantityUnit = string.Empty;
        }
    }

    private async Task AddInstructionAsync()
    {
        ValidateInstruction();
        if (isNewInstructionValid)
        {
            AddedInstructions.Add(new Instruction
            {
                InstructionText = NewInstructionText
            });

            AllInstructions.Add(new Instruction
            {
                InstructionText = NewInstructionText
            });

            NewInstructionText = string.Empty;
        }
    }

    private async Task ShowDeleteConfirmation()
    {
        var parameters = new DialogParameters
        {
            { "Message", "Are you sure you want to delete this recipe? This action cannot be undone." }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseOnEscapeKey = true
            };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Recipe", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteConfirmed();
        }
    }

    private async Task DeleteConfirmed()
    {
        await RecipeService.DeleteRecipeAsync(Recipe.ID);
        Snackbar.Add("Recipe deleted successfully.", Severity.Success);
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleThumbnailImageSelected(IBrowserFile file)
    {
        if (file != null)
        {
            ThumbnailImage = file;
            var thumbnailUrl = await RecipeService.UploadImageAsync(ThumbnailImage);
            if (!string.IsNullOrEmpty(thumbnailUrl))
            {
                Recipe.ThumbnailImage = thumbnailUrl;
                showFileUpload = false;
                IsDefaultThumbnail = false;
                IsFileTooBig = false;
            }
            else
            {
                IsDefaultThumbnail = true;
                IsFileTooBig = true;
            }
        }
    }

    private void RemoveThumbnail()
    {
        ThumbnailImage = null;
        Recipe.ThumbnailImage = null;
        showFileUpload = true;
        IsDefaultThumbnail = true;
    }

    private void EditIngredient(RecipeIngredient recipeIngredient)
    {
        foreach (var ingredient in Recipe.RecipeIngredients)
        {
            if (ingredient.IsEditing == true)
            {
                CancelEditIngredient(ingredient);
            }
            ingredient.IsEditing = false;
        }

        currentIngredientNameEdit = recipeIngredient.Ingredient.Name;
        currentQuantityEdit = recipeIngredient.Quantity;
        currentUnitEdit = recipeIngredient.QuantityUnit;
        recipeIngredient.IsEditing = true;
    }

    private void SaveIngredient(RecipeIngredient recipeIngredient)
    {
        ValidateIngEdit(recipeIngredient);
        ValidateIngQuantEdit(recipeIngredient);

        if (isIngNameValid && isQuantityValid)
        {
            recipeIngredient.IsEditing = false;
        }
    }

    private void CancelEditIngredient(RecipeIngredient recipeIngredient)
    {
        recipeIngredient.Ingredient.Name = currentIngredientNameEdit;
        recipeIngredient.Quantity = currentQuantityEdit;
        recipeIngredient.QuantityUnit = currentUnitEdit;
        recipeIngredient.IsEditing = false;
    }

    private void RemoveIngredient(RecipeIngredient recipeIngredient)
    {
        var addedIngredient = AddedIngredients.FirstOrDefault(i => i.Name == recipeIngredient.Ingredient.Name &&
                                                                   i.Quantity == recipeIngredient.Quantity &&
                                                                   i.QuantityUnit == recipeIngredient.QuantityUnit);
        if (addedIngredient != null)
        {
            AddedIngredients.Remove(addedIngredient);
        }
        AllIngredients.Remove(recipeIngredient);
        Recipe.RecipeIngredients.Remove(recipeIngredient);
    }

    private void EditInstruction(Instruction instruction)
    {
        foreach (var instr in Recipe.Instructions)
        {
            if (instr.IsEditing == true)
            {
                CancelEditInstruction(instr);
            }
            instr.IsEditing = false;
        }
        currentInstructionEdit = instruction.InstructionText;
        instruction.IsEditing = true;
    }

    private void RemoveInstruction(Instruction instruction)
    {
        var addedInstruction = AddedInstructions.FirstOrDefault(i => i.InstructionText == instruction.InstructionText);
        if (addedInstruction != null)
        {
            AddedInstructions.Remove(addedInstruction);
        }
        AllInstructions.Remove(instruction);
        Recipe.Instructions.Remove(instruction);
        ReorderStepNums();
    }

    private void ReorderStepNums()
    {
        if (AllInstructions != null && AllInstructions.Count > 0)
        {
            for (int i = 0; i < AllInstructions.Count; i++)
            {
                AllInstructions[i].StepNumber = i + 1;
            }
        }
    }

    private void SaveInstruction(Instruction instruction)
    {
        ValidateInstructEdit(instruction);
        if (isInstructionValid)
        {
            instruction.IsEditing = false;
        }
    }

    private void CancelEditInstruction(Instruction instruction)
    {
        instruction.InstructionText = currentInstructionEdit;
        instruction.IsEditing = false;
    }

    private void ReturnBack()
    {
        NavigationManager.NavigateTo($"/recipes/{RecipeID}");
    }

    private bool SaveEditRecipe()
    {
        isNameValid = !string.IsNullOrWhiteSpace(RecipeName);
        isPrepValid = RecipePrepTime > 0;
        isCookTimeValid = RecipeCookTime > 0;

        if (isNameValid  && isPrepValid && isCookTimeValid)
        {
            Recipe.Name = RecipeName;
            Recipe.Description = RecipeDescription;
            Recipe.PrepTime = RecipePrepTime;
            Recipe.CookTime = RecipeCookTime;
            Recipe.Servings = RecipeServings;
            Recipe.Category = RecipeCategory;
            Recipe.Ethnicity = RecipeEthnicity;
            Recipe.RecipeStory = RecipeStory == null ? null : RecipeStory;
            return true;
        }

        return false;
    }

    private void ValidatePrepTime() => isPrepValid = Recipe.PrepTime > 0;
    private void ValidateCookTime() => isCookTimeValid = Recipe.CookTime > 0;
    private void ValidateIngredientName() => isNewIngNameValid = !string.IsNullOrWhiteSpace(NewIngredientName);
    private void ValidateIngredientQuantity() => isNewQuantityValid = !string.IsNullOrWhiteSpace(NewIngredientQuantity);
    private void ValidateInstruction() => isNewInstructionValid = !string.IsNullOrEmpty(NewInstructionText);
    private void ValidateRecipeName() => isNameValid = !string.IsNullOrEmpty(RecipeName);
    private void ValidateRecipeStory() => isStoryValid = !string.IsNullOrEmpty(RecipeStory);
    private void ValidateIngEdit(RecipeIngredient ri) => isIngNameValid = !string.IsNullOrEmpty(ri.Ingredient.Name);
    private void ValidateIngQuantEdit(RecipeIngredient ri) => isQuantityValid = !string.IsNullOrEmpty(ri.Quantity);
    private void ValidateInstructEdit(Instruction i) => isInstructionValid = !string.IsNullOrEmpty(i.InstructionText);

    private async Task HandleSubmit()
    {
        var ConfirmSave = SaveEditRecipe();
        if (!ConfirmSave)
        {
            return;
        }

        if (AddedIngredients != null && AddedIngredients.Count > 0)
        {
            foreach (var ingredient in AddedIngredients)
            {
                await RecipeService.AddIngredientToRecipeAsync(Recipe, ingredient.Name, ingredient.Quantity, ingredient.QuantityUnit, ingredient.ToGrams);
            }
        }

        if (AddedInstructions != null && AddedInstructions.Count > 0)
        {
            foreach (var instruction in AddedInstructions)
            {
                await RecipeService.AddInstructionToRecipeAsync(Recipe, instruction.InstructionText);
            }
        }

        if (IsDefaultThumbnail)
        {
            switch (Recipe.Category)
            {
                case "Breakfast":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Breakfast.jpg";
                    break;

                case "Lunch":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Lunch.jpg";
                    break;

                case "Appetizer":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Appetizer.jpg";
                    break;

                case "Dinner":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Dinner.jpg";
                    break;

                case "Dessert":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Dessert.jpg";
                    break;

                case "Snack":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Snack.jpeg";
                    break;

                case "Beverage":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Beverage.jpg";
                    break;

                case "Sauce":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Sauce.jpeg";
                    break;

                case "Seasoning":
                    Recipe.ThumbnailImage = "DefaultRecipesImages\\Seasoning.jpg";
                    break;

                default:
                    break;
            }
        }

        await RecipeService.SaveChanges();
        Snackbar.Add("Recipe edited successfully.", Severity.Success);
        // Redirect to recipe details page
        NavigationManager.NavigateTo($"/recipes/{Recipe.ID}");
    }
}

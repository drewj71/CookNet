@page "/edit-recipe/{RecipeID:int}"
@using CookNet.Data
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject RecipeService RecipeService
@rendermode InteractiveServer

<div class="edit-recipe-container">
    <EditForm Model="@Recipe" OnValidSubmit="HandleSubmit" FormName="EditRecipeForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3 class="edit-recipe-title">Edit Recipe</h3>

        <div class="form-group">
            <label for="Name">Name: </label>
            <InputText id="Name" class="form-control" @bind-Value="@RecipeName" />
        </div>

        @if (@Recipe.ThumbnailImage != null)
        {
            <div class="thumbnail-container position-relative">
                <img src="@Recipe.ThumbnailImage" alt="RecipeThumbnail" class="border rounded shadow m-2 p-2 preview-thumbnail">
                <button type="button" class="close" aria-label="Close" @onclick="RemoveThumbnail">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

        <div class="file-input-wrapper">
            <InputFile class="custom-file-input" OnChange="@HandleThumbnailImageSelected" accept="image/*"
                       style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; z-index: 2;
            " />
            <label for="file-upload" class="custom-file-label">Upload Thumbnail</label>
        </div>

        <div class="form-group">
            <label for="Description">Description:</label>
            <InputTextArea id="Description" class="form-control" @bind-Value="@RecipeDescription" />
        </div>

        <div class="form-group inline-group">
            <label for="PrepTime">Prep Time (minutes):</label>
            <InputNumber id="PrepTime" class="form-control" @bind-Value="@RecipePrepTime" />
        </div>

        <div class="form-group inline-group">
            <label for="CookTime">Cook Time (minutes):</label>
            <InputNumber id="CookTime" class="form-control" @bind-Value="@RecipeCookTime" />
        </div>

        <div class="form-group inline-group-long">
            <label for="Category">Category:</label>
            <InputSelect id="Category" class="form-control long-select" @bind-Value="@Recipe.Category">
                <option value="Select One">--Select One--</option>
                <option value="Breakfast">Breakfast</option>
                <option value="Lunch">Lunch</option>
                <option value="Appetizer">Appetizer</option>
                <option value="Dinner">Dinner</option>
                <option value="Dessert">Dessert</option>
                <option value="Snack">Snack</option>
                <option value="Beverage">Beverage</option>
                <option value="Topping">Topping</option>
            </InputSelect>
        </div>

        <div class="form-group inline-group-long">
            <label for="Ethnicity">Ethnicity:</label>
            <InputSelect id="Ethnicity" class="form-control long-select" @bind-Value="@Recipe.Ethnicity">
                <option value="Select One">--Select One--</option>
                <option value="NA">N/A</option>
                <option value="Asian">Asian</option>
                <option value="LatinHispanic">Latin/Hispanic</option>
                <option value="Mediterranean">Mediterranean</option>
                <option value="MiddleEastern">Middle Eastern</option>
                <option value="American">American</option>
                <option value="Southern">Southern</option>
            </InputSelect>
        </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public int RecipeID { get; set; }

    private Recipe Recipe { get; set; } = new Recipe();
    private string RecipeName { get; set; }
    private string RecipeDescription { get; set; }
    private int RecipePrepTime { get; set; }
    private int RecipeCookTime { get; set; }
    private string RecipeCategory { get; set; }
    private string RecipeEthnicity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Recipe = await RecipeService.GetRecipeByIdAsync(RecipeID);
        if (Recipe != null)
        {
            RecipeName = Recipe.Name;
            RecipeDescription = Recipe.Description;
            RecipePrepTime = Recipe.PrepTime;
            RecipeCookTime = Recipe.CookTime;
            RecipeCategory = Recipe.Category;
            RecipeEthnicity = Recipe.Ethnicity;

        }
    }

    private async Task HandleThumbnailImageSelected(InputFileChangeEventArgs e)
    {
        var thumbnailImage = e.File;
        var thumbnailUrl = await RecipeService.UploadImageAsync(thumbnailImage);
        Recipe.ThumbnailImage = thumbnailUrl;
    }

    private void RemoveThumbnail()
    {
        Recipe.ThumbnailImage = null;
    }

    async Task HandleSubmit()
    {
        
    }
}

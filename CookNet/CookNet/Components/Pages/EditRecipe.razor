@page "/edit-recipe/{RecipeID:int}"
@using CookNet.Data
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject RecipeService RecipeService
@rendermode InteractiveServer

<PageTitle>Edit Recipe</PageTitle>

<div class="edit-recipe-container">
    <EditForm Model="@Recipe" OnValidSubmit="HandleSubmit" FormName="EditRecipeForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-5">
                <h3><i class="bi bi-arrow-left-square-fill goback" @onclick="ReturnBack"></i></h3>
            </div>              
            <div class="col-md-6">
                <h3 class="edit-recipe-title">Edit Recipe</h3>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 form-group">
                <label class="form-group-label" for="Name">Name: </label>
                <InputText id="Name" class="form-control" @bind-Value="@RecipeName" style="@GetInputStyle(RecipeName, isNameValid)" />
            </div>
            <div class="col-md-6 form-group">
                <label class="form-group-label" for="Description">Description:</label>
                <InputTextArea id="Description" class="form-control" @bind-Value="@RecipeDescription" style="@GetInputStyle(RecipeDescription, isDescriptionValid)" />
            </div>
        </div>

        <div class="row d-flex">
            <div class="col-md-6 d-flex flex-column">
                @if (Recipe.ThumbnailImage != null)
                {
                    <MudImage Src="@Recipe.ThumbnailImage" Alt="Thumbnail Image" Class="mb-2"
                              Style="width: 400px; height: auto;" />
                    <div class="col-md-6 d-flex flex-column px-3">
                        <button class="btn btn-danger" type="button" @onclick="RemoveThumbnail">Remove Thumbnail</button>
                    </div>
                }

                @if (showFileUpload)
                {
                    <div class="thumbnailimg-input col-md-4">
                        <em><p class="thumbnailimg-help">Recommended file size: 1920 x 1080</p></em>
                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="HandleThumbnailImageSelected" MaximumFileCount="10">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Choose Image
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>
                }
            </div>
            <div class="col-md-6 d-flex flex-column">
                <label class="form-group-label" for="StoryText">Recipe Story:</label>
                <InputTextArea id="StoryText" class="form-control" @bind-Value="@RecipeStory" style="flex-grow: 1; resize: none;" />
            </div>
        </div>
        
        <div class="row my-3">
            <div class="col-sm-8 col-md-2 form-group">
                <label class="form-group-label" for="PrepTime">Prep Time (minutes):</label>
                <InputNumber id="PrepTime" class="form-control" @bind-Value="@RecipePrepTime" style="@GetInputStyleInt(RecipePrepTime, isPrepValid)" />
            </div>

            <div class="col-sm-8 col-md-2 form-group">
                <label class="form-group-label" for="CookTime">Cook Time (minutes):</label>
                <InputNumber id="CookTime" class="form-control" @bind-Value="@RecipeCookTime" style="@GetInputStyleInt(RecipeCookTime, isCookTimeValid)" />
            </div>

            <div class="col-sm-8 col-md-2 form-group">
                <label class="form-group-label" for="Servings">Servings:</label>
                <InputNumber id="Servings" class="form-control" @bind-Value="@RecipeServings" />
            </div>

            <div class="col-sm-8 col-md-3 form-group">
                <label class="form-group-label" for="Category">Category:</label>
                <InputSelect id="Category" class="form-control long-select" @bind-Value="@RecipeCategory"
                             style="@GetInputStyleDDL(RecipeCategory, isCategoryValid)">
                    <option value="Select One">--Select One--</option>
                    <option value="Breakfast">Breakfast</option>
                    <option value="Lunch">Lunch</option>
                    <option value="Appetizer">Appetizer</option>
                    <option value="Dinner">Dinner</option>
                    <option value="Dessert">Dessert</option>
                    <option value="Snack">Snack</option>
                    <option value="Beverage">Beverage</option>
                    <option value="Topping">Topping</option>
                </InputSelect>
            </div>

            <div class="col-sm-8 col-md-3 form-group">
                <label class="form-group-label" for="Ethnicity">Ethnicity:</label>
                <InputSelect id="Ethnicity" class="form-control long-select" @bind-Value="@RecipeEthnicity"
                             style="@GetInputStyleDDL(RecipeEthnicity, isEthnicityValid)">
                    <option value="Select One">--Select One--</option>
                    <option value="NA">N/A</option>
                    <option value="Asian">Asian</option>
                    <option value="LatinHispanic">Latin/Hispanic</option>
                    <option value="Mediterranean">Mediterranean</option>
                    <option value="MiddleEastern">Middle Eastern</option>
                    <option value="American">American</option>
                    <option value="Southern">Southern</option>
                </InputSelect>
            </div>
        </div>

        <div class="edit-section">
            <div class="col-md-6 edit-ingredients" style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px; border-radius: 5px;">
                <h4 class="col-md-6 edit-ingredients-title">Ingredients:</h4>
                @foreach (var ing in AllIngredients)
                {
                    var ingredient = ing.Ingredient;
                    <div class="col-md-12 ingredient-edit">
                        @if (!ing.IsEditing)
                        {
                            <div>
                                <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveIngredient(ing)"></i>
                                <i class="edit-ingredient fa fa-pen" @onclick="() => EditIngredient(ing)"></i>
                                <span>@ing.Quantity</span>
                                <span>@ing.QuantityUnit</span>
                                <span>@ingredient.Name</span>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-4">
                                    <label class="form-group-label" for="NewIngredientName">Name:</label>
                                    <InputText id="NewIngredientName" class="form-control" @bind-Value="ingredient.Name"
                                               style="@GetInputStyle(ingredient.Name, isIngNameValid)"/>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-group-label" for="NewIngredientQuantity">Quantity:</label>
                                    <InputText id="NewIngredientQuantity" class="form-control" @bind-Value="ing.Quantity"
                                               style="@GetInputStyle(ing.Quantity, isQuantityValid)"/>
                                </div>
                                <div class="col-md-2">
                                    <label class="form-group-label" for="NewQuantityUnit">Unit:</label>
                                    <InputText id="NewQuantityUnit" class="form-control" @bind-Value="ing.QuantityUnit" />
                                </div>
                                <div class="col-md-3 save-cancel-btns">
                                    <button type="button" class="btn btn-primary" @onclick="() => SaveIngredient(ing)">Save</button>
                                    <button type="button" class="btn btn-danger" @onclick="() => CancelEditIngredient(ing)">Cancel</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="col-md-6 edit-instructions" style="background-color: #f2f2f2; padding: 10px; margin-bottom: 10px; border-radius: 5px;">
                <h4 class="col-md-6 edit-instructions-title">Instructions:</h4>
                @foreach (var instruction in AllInstructions)
                {
                    <div class="col-md-12 instruction-edit">
                        @if (!instruction.IsEditing)
                        {
                            <div>
                                <i class="remove-ingredient bi bi-x-square-fill" @onclick="() => RemoveInstruction(instruction)"></i>
                                <i class="edit-ingredient fa fa-pen" @onclick="() => EditInstruction(instruction)"></i>
                                <span>@instruction.InstructionText</span>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-9">
                                    <label class="form-group-label" for="NewInstruction">Instruction:</label>
                                    <InputText id="NewInstruction" class="form-control" @bind-Value="instruction.InstructionText"
                                               style="@GetInputStyle(instruction.InstructionText, isInstructionValid)" />
                                </div>
                                <div class="col-md-3 save-cancel-btns">
                                    <button type="button" class="btn btn-primary" @onclick="() => SaveInstruction(instruction)">Save</button>
                                    <button type="button" class="btn btn-danger" @onclick="() => CancelEditInstruction(instruction)">Cancel</button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="col-md-12 row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-5">
                        <label class="form-group-label" for="NewIngredientName">Name:</label>
                        <InputText id="NewIngredientName" class="form-control" @bind-Value="@NewIngredientName" placeholder="All-Purpose Flour"
                                   style="@GetInputStyle(NewIngredientName, isNewIngNameValid)" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-group-label" for="NewIngredientQuantity">Quantity:</label>
                        <InputText id="NewIngredientQuantity" class="form-control" @bind-Value="@NewIngredientQuantity" placeholder="1/2"
                                   style="@GetInputStyle(NewIngredientQuantity, isNewQuantityValid)" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-group-label" for="NewIngredientQuantityUnit">Unit:</label>
                        <InputText id="NewIngredientQuantityUnit" class="form-control" @bind-Value="@NewIngredientQuantityUnit" placeholder="cup" />
                    </div>
                    <div class="col-md-3 add-ingredient-btn">
                        <button type="button" class="btn btn-primary" @onclick="AddIngredientAsync">Add Ingredient</button>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-9">
                        <label class="form-group-label" for="NewInstructionText">Instructions:</label>
                        <InputText id="NewInstructionText" class="form-control" @bind-Value="NewInstructionText" placeholder="Preheat oven to 450."
                                   style="@GetInputStyle(NewInstructionText, isNewInstructionValid)" />
                    </div>
                    <div class="col-md-3 add-instruction-btn">
                        <button type="button" class="btn btn-primary" @onclick="AddInstructionAsync">Add Instruction</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-12 confirmation-btns pt-3">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-danger" @onclick="ShowConfirmationModal">Delete Recipe</button>
        </div>

        <!-- Delete Confirmation Modal -->
        @if (ShowModal)
        {
            <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Delete Confirmation</h5>
                            <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to delete the recipe?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </EditForm>
</div>

@code {
    [Parameter]
    public int RecipeID { get; set; }

    private Recipe Recipe { get; set; } = new Recipe();
    private string RecipeName { get; set; }
    private string RecipeDescription { get; set; }
    private int RecipePrepTime { get; set; }
    private int RecipeCookTime { get; set; }
    private int? RecipeServings { get; set; }
    private string RecipeCategory { get; set; }
    private string RecipeEthnicity { get; set; }
    private string RecipeStory { get; set; }
    private bool ShowModal { get; set; } = false;
    private IBrowserFile? ThumbnailImage;
    private bool showFileUpload = true;
    private string NewIngredientName { get; set; }
    private string NewIngredientQuantity { get; set; }
    private string NewIngredientQuantityUnit { get; set; }
    private string NewInstructionText { get; set; }
    private bool isNameValid = true;
    private bool isDescriptionValid = true;
    private bool isPrepValid = true;
    private bool isCookTimeValid = true;
    private bool isCategoryValid = true;
    private bool isEthnicityValid = true;
    private bool isIngNameValid = true;
    private bool isQuantityValid = true;
    private bool isInstructionValid = true;
    private bool isNewIngNameValid = true;
    private bool isNewQuantityValid = true;
    private bool isNewInstructionValid = true;
    private string currentIngredientNameEdit;
    private string currentQuantityEdit;
    private string currentUnitEdit;
    private string currentInstructionEdit;

    List<RecipeIngredient> AllIngredients { get; set; } = new();
    List<Instruction> AllInstructions { get; set; } = new();
    List<Ingredient> AddedIngredients { get; set; } = new();
    List<Instruction> AddedInstructions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Recipe = await RecipeService.GetRecipeByIdAsync(RecipeID);
        AllIngredients = Recipe.RecipeIngredients.ToList();
        AllInstructions = Recipe.Instructions.ToList();
        if (Recipe != null)
        {
            RecipeName = Recipe.Name;
            RecipeDescription = Recipe.Description;
            RecipePrepTime = Recipe.PrepTime;
            RecipeCookTime = Recipe.CookTime;
            RecipeServings = Recipe.Servings;
            RecipeCategory = Recipe.Category;
            RecipeEthnicity = Recipe.Ethnicity;
            RecipeStory = Recipe.RecipeStory;
            if (Recipe.ThumbnailImage != null)
            {
                showFileUpload = false;
            }
        }
    }

    private string GetInputStyle(string value, bool isValid)
    {
        return string.IsNullOrWhiteSpace(value) && !isValid ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private string GetInputStyleInt(int value, bool isValid)
    {
        return value <= 0 && !isValid ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private string GetInputStyleDDL(string value, bool isValid)
    {
        return !isValid && value == "Select One" ? "border: 1px solid red;" : "border: 1px solid initial;";
    }

    private async Task AddIngredientAsync()
    {
        isNewIngNameValid = !string.IsNullOrWhiteSpace(NewIngredientName);
        isNewQuantityValid = !string.IsNullOrWhiteSpace(NewIngredientQuantity);

        if (isNewIngNameValid && isNewQuantityValid)
        {
            AddedIngredients.Add(new Ingredient
            {
                Name = NewIngredientName,
                Quantity = NewIngredientQuantity,
                QuantityUnit = NewIngredientQuantityUnit
            });

            var newIngredient = new Ingredient
            {
                Name = NewIngredientName
            };

            AllIngredients.Add(new RecipeIngredient
            {
                Ingredient = newIngredient,
                Quantity = NewIngredientQuantity,
                QuantityUnit = NewIngredientQuantityUnit
            });

            NewIngredientName = string.Empty;
            NewIngredientQuantity = string.Empty;
            NewIngredientQuantityUnit = string.Empty;
        }
    }

    private async Task AddInstructionAsync()
    {
        isNewInstructionValid = !string.IsNullOrWhiteSpace(NewInstructionText);

        if (isNewInstructionValid)
        {
            AddedInstructions.Add(new Instruction
            {
                InstructionText = NewInstructionText
            });

            AllInstructions.Add(new Instruction
            {
                InstructionText = NewInstructionText
            });

            NewInstructionText = string.Empty;
        }
    }

    private void ShowConfirmationModal()
    {
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private async Task DeleteConfirmed()
    {
        // Call the RecipeService to delete the recipe from the database
        await RecipeService.DeleteRecipeAsync(Recipe.ID);

        // Redirect the user to a specific page after deletion, for example, the home page
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleThumbnailImageSelected(IBrowserFile file)
    {
        if (file != null)
        {
            ThumbnailImage = file;
            var thumbnailUrl = await RecipeService.UploadImageAsync(ThumbnailImage);
            Recipe.ThumbnailImage = thumbnailUrl;
            showFileUpload = false;
        }
    }

    private void RemoveThumbnail()
    {
        ThumbnailImage = null;
        Recipe.ThumbnailImage = null;
        showFileUpload = true;
    }

    private void EditIngredient(RecipeIngredient recipeIngredient)
    {
        foreach (var ingredient in Recipe.RecipeIngredients)
        {
            ingredient.IsEditing = false;
        }

        currentIngredientNameEdit = recipeIngredient.Ingredient.Name;
        currentQuantityEdit = recipeIngredient.Quantity;
        currentUnitEdit = recipeIngredient.QuantityUnit;
        recipeIngredient.IsEditing = true;
    }

    private void SaveIngredient(RecipeIngredient recipeIngredient)
    {
        isIngNameValid = !string.IsNullOrEmpty(recipeIngredient.Ingredient.Name);
        isQuantityValid = !string.IsNullOrEmpty(recipeIngredient.Quantity);

        if (isIngNameValid && isQuantityValid)
        {
            recipeIngredient.IsEditing = false;
        }
    }

    private void CancelEditIngredient(RecipeIngredient recipeIngredient)
    {
        recipeIngredient.Ingredient.Name = currentIngredientNameEdit;
        recipeIngredient.Quantity = currentQuantityEdit;
        recipeIngredient.QuantityUnit = currentUnitEdit;
        recipeIngredient.IsEditing = false;
    }

    private void RemoveIngredient(RecipeIngredient recipeIngredient)
    {
        var addedIngredient = AddedIngredients.FirstOrDefault(i => i.Name == recipeIngredient.Ingredient.Name &&
                                                                   i.Quantity == recipeIngredient.Quantity &&
                                                                   i.QuantityUnit == recipeIngredient.QuantityUnit);
        if (addedIngredient != null)
        {
            AddedIngredients.Remove(addedIngredient);
        }
        AllIngredients.Remove(recipeIngredient);
        Recipe.RecipeIngredients.Remove(recipeIngredient);
    }

    private void EditInstruction(Instruction instruction)
    {
        foreach (var instr in Recipe.Instructions)
        {
            instr.IsEditing = false;
        }
        currentInstructionEdit = instruction.InstructionText;
        instruction.IsEditing = true;
    }

    private void RemoveInstruction(Instruction instruction)
    {
        var addedInstruction = AddedInstructions.FirstOrDefault(i => i.InstructionText == instruction.InstructionText);
        if (addedInstruction != null)
        {
            AddedInstructions.Remove(addedInstruction);
        }
        AllInstructions.Remove(instruction);
        Recipe.Instructions.Remove(instruction);
        ReorderStepNums();
    }

    private void ReorderStepNums()
    {
        if (AllInstructions != null && AllInstructions.Count > 0)
        {
            for (int i = 0; i < AllInstructions.Count; i++)
            {
                AllInstructions[i].StepNumber = i + 1;
            }
        }
    }

    private void SaveInstruction(Instruction instruction)
    {
        isInstructionValid = !string.IsNullOrEmpty(instruction.InstructionText);
        if (isInstructionValid)
        {
            instruction.IsEditing = false;
        }
    }

    private void CancelEditInstruction(Instruction instruction)
    {
        instruction.InstructionText = currentInstructionEdit;
        instruction.IsEditing = false;
    }

    private void ReturnBack()
    {
        NavigationManager.NavigateTo($"/recipes/{RecipeID}");
    }

    private bool SaveEditRecipe()
    {
        isNameValid = !string.IsNullOrWhiteSpace(RecipeName);
        isDescriptionValid = !string.IsNullOrWhiteSpace(RecipeDescription);
        isPrepValid = RecipePrepTime > 0;
        isCookTimeValid = RecipeCookTime > 0;
        isCategoryValid = RecipeCategory != "Select One";
        isEthnicityValid = RecipeEthnicity != "Select One";

        if (isNameValid && isDescriptionValid && isPrepValid && isCookTimeValid && isCategoryValid && isEthnicityValid)
        {
            Recipe.Name = RecipeName;
            Recipe.Description = RecipeDescription;
            Recipe.PrepTime = RecipePrepTime;
            Recipe.CookTime = RecipeCookTime;
            Recipe.Servings = RecipeServings;
            Recipe.Category = RecipeCategory;
            Recipe.Ethnicity = RecipeEthnicity;
            Recipe.RecipeStory = RecipeStory == null ? null : RecipeStory;
            return true;
        }

        return false;
    }

    private async Task HandleSubmit()
    {
        var ConfirmSave = SaveEditRecipe();
        if (!ConfirmSave)
        {
            return;
        }

        if (AddedIngredients != null && AddedIngredients.Count > 0)
        {
            foreach (var ingredient in AddedIngredients)
            {
                await RecipeService.AddIngredientToRecipeAsync(Recipe, ingredient.Name, ingredient.Quantity, ingredient.QuantityUnit);
            }
        }

        if (AddedInstructions != null && AddedInstructions.Count > 0)
        {
            foreach (var instruction in AddedInstructions)
            {
                await RecipeService.AddInstructionToRecipeAsync(Recipe, instruction.InstructionText);
            }
        }

        await RecipeService.SaveChanges();

        // Redirect to recipe details page
        NavigationManager.NavigateTo($"/recipes/{Recipe.ID}");
    }
}

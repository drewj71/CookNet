@page "/cookbooks/{UserName}"
@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IUserService UserService
@inject RecipeService RecipeService
@inject CookbookService CookbookService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Your CookBooks</PageTitle>

<div class="usercookbooks-container">
    <div class="usercookbooks-header">
        <h3 class="yourcookbooks-title">Your CookBooks</h3>
        <div class="top-buttons">
            <div class="cookbooks-amount d-inline-block">
                <p class="cookbooks-count">@amountOfCookbooks CookBooks</p>
            </div>
            <button class="add-cookbook btn btn-success" type="button" @onclick="OpenCreateCookbookDialogAsync">+</button>
        </div>
    </div>

    <div class="divider-line"></div>
   
    <div class="displaycookbooks-container">
        @if (UserCookbooksList != null && UserCookbooksList.Count > 0)
        {
            @foreach (var cookbook in UserCookbooksList)
            {
                var isCookbookPublic = cookbook.IsPublic ? "Public" : "Private";
                <div class="cookbook-card-container">
                    <div class="cookbook-card">
                        <div class="cookbook-img" @onclick="() => NavigateToCookbookRecipes(cookbook.CookbookID, cookbook.CookbookName)">
                            @if (!string.IsNullOrEmpty(cookbook.CoverImage))
                            {
                                <img class="cookbookcard-img-top" src="@cookbook.CoverImage" alt="Cover Image" title="@cookbook.CookbookName" />
                            }
                        </div>
                        <div class="cookbookcard-body">
                            <h5 class="cookbookcard-title">@cookbook.CookbookName</h5>
                            <p class="cookbookdate-created">@cookbook.DateCreated.ToShortDateString()</p>
                            <p class="cookbook-ispublic @isCookbookPublic">@((cookbook.IsPublic ? "Public" : "Private"))</p>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="nonefound-container text-center">
                <h5 class="nonefound-title">You don't have any CookBooks yet!</h5>
            </div>
        }
    </div>

</div>

@code {
    [Parameter]
    public string UserName { get; set; }

    [Parameter]
    public EventCallback RefreshCookbooksCallback { get; set; }

    private ApplicationUser User;
    private List<UserCookbook> UserCookbooksList;
    private string userId { get; set; }
    private int? amountOfCookbooks;

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserByUsernameAsync(UserName);
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user != null)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        if (userId != null)
        {
            UserCookbooksList = await CookbookService.GetCookbooksByUserIdAsync(userId);
            amountOfCookbooks = UserCookbooksList.Count;
        }
    }

    private async Task OpenCreateCookbookDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "UserID" , userId },
            { "OnCreatedCallback", EventCallback.Factory.Create(this, OnCookbookCreated) }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<CreateCookbookDialog>("Create New Cookbook", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Cookbook created successfully!", Severity.Success);
        }
    }
    
    private async Task OnCookbookCreated()
    {
        if (RefreshCookbooksCallback.HasDelegate)
        {
            await RefreshCookbooksCallback.InvokeAsync(null);
        }

        // Reload the UserCookbooks list
        UserCookbooksList = await CookbookService.GetCookbooksByUserIdAsync(userId);
        StateHasChanged();
    }

    private void NavigateToCookbookRecipes(int cookbookId, string cookbookName)
    {
        Navigation.NavigateTo($"/cookbook-recipes/{cookbookId}/{cookbookName}");
    }
}

@using CookNet.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject RecipeService RecipeService
@inject CookbookService CookbookService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@page "/recipes"

<PageTitle>All Recipes</PageTitle>

<div class="allrecipes-container">
    <h3 class="all-recipes-title">All Recipes</h3>

    <hr />

    <div class="filter-options mb-5">
        <div class="row">
            <div class="col-md-3">
                <MudTextField @bind-Value="searchQuery" Label="Search" Placeholder="Search Recipes" Variant="Variant.Outlined" Style="width: 100%" 
                    DebounceInterval="250" OnDebounceIntervalElapsed="SearchRecipesDebounced"></MudTextField>
            </div>
            <div class="col-md-3">
                <MudDateRangePicker @ref="picker" Label="Select Date Range" @bind-DateRange="SelectedDateRange" AutoClose="@autoClose" Variant="Variant.Outlined" Style="width: 100%"></MudDateRangePicker>
            </div>
            <div class="col-md-3">
                <MudSelect T="string" @bind-Value="categoryVal" SelectedValuesChanged="@(SearchRecipesByDDL)" Label="Select a Category" Placeholder="Category"
                           Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem Value="@("Breakfast")">Breakfast</MudSelectItem>
                    <MudSelectItem Value="@("Lunch")">Lunch</MudSelectItem>
                    <MudSelectItem Value="@("Appetizer")">Appetizer</MudSelectItem>
                    <MudSelectItem Value="@("Dinner")">Dinner</MudSelectItem>
                    <MudSelectItem Value="@("Dessert")">Dessert</MudSelectItem>
                    <MudSelectItem Value="@("Snack")">Snack</MudSelectItem>
                    <MudSelectItem Value="@("Beverage")">Beverage</MudSelectItem>
                    <MudSelectItem Value="@("Topping")">Topping</MudSelectItem>
                    <MudSelectItem Value="@("Seasoning")">Seasoning</MudSelectItem>
                </MudSelect>
            </div>
            <div class="col-md-3">
                <MudSelect T="string" @bind-Value="ethnicityVal" SelectedValuesChanged="@(SearchRecipesByDDL)" Label="Select an Ethnicity" Placeholder="Ethnicity"
                           Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem Value="@("Asian")">Asian</MudSelectItem>
                    <MudSelectItem Value="@("LatinHispanic")">Latin/Hispanic</MudSelectItem>
                    <MudSelectItem Value="@("Mediterranean")">Mediterranean</MudSelectItem>
                    <MudSelectItem Value="@("MiddleEastern")">MiddleEastern</MudSelectItem>
                    <MudSelectItem Value="@("American")">American</MudSelectItem>
                    <MudSelectItem Value="@("Southern")">Southern</MudSelectItem>
                </MudSelect>
            </div>
        </div>
    </div>

    <div class="recipes-container">
        <div class="allrecipes-cards">
            @if (filteredRecipes == null)
            {
                <p>No Recipes to Display</p>
            }
            else
            {
                <RecipeCards Recipes="filteredRecipes" OnBookmarkClicked="OpenCookbookDialogAsync" />
            }
        </div>
    </div>
</div>

@code {
    // TODO - Display recipes with options to search, or filter by ingredient, CookTime, ethnicity, or category
    private string searchQuery = string.Empty;
    private PaginatedList<Recipe> filteredRecipes;
    private DateRange selectedDateRange = new DateRange(DateTime.Today.AddMonths(-6), DateTime.Today);
    private int pageIndex = 1;
    private int pageSize = 100;
    private List<UserCookbook> UserCookbooks;
    private string userId { get; set; }
    private MudDateRangePicker picker;
    private bool autoClose;
    private string categoryVal { get; set; }
    private string ethnicityVal { get; set; }

    private DateRange SelectedDateRange
    {
        get => selectedDateRange;
        set
        {
            selectedDateRange = value;
            OnDateRangeChanged(selectedDateRange);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user != null)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        if (userId != null)
        {
            await LoadUserCookbooks();
        }
    }

    private async Task LoadUserCookbooks()
    {
        UserCookbooks = await CookbookService.GetCookbooksByUserIdAsync(userId);
        StateHasChanged();
    }

    private async Task OpenCookbookDialogAsync(int recipeId)
    {
        var parameters = new DialogParameters
        {
            { "UserCookbooks", UserCookbooks },
            { "RecipeID", recipeId },
            { "UserID" , userId },
            { "RefreshCookbooksCallback", EventCallback.Factory.Create(this, LoadUserCookbooks) }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseOnEscapeKey = true
            };

        var dialog = await DialogService.ShowAsync<AddCookbookDialog>("Add to CookBook", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            Snackbar.Add("Recipe added successfully!", Severity.Success);
        }
    }

    private async Task LoadRecipes()
    {
        DateTime startDate = selectedDateRange.Start ?? DateTime.MinValue;
        DateTime endDate = selectedDateRange.End ?? DateTime.MaxValue;

        filteredRecipes = await RecipeService.GetPaginatedRecipesBySearchQuery(startDate, endDate, searchQuery, categoryVal, ethnicityVal, pageIndex, pageSize);
        StateHasChanged();
    }

    private async Task SearchRecipesDebounced(string query)
    {
        searchQuery = query;
        await LoadRecipes();
    }

    private async Task OnDateRangeChanged(DateRange newRange)
    {
        // Update the selected date range
        selectedDateRange = newRange;

        // Reload recipes with the new date range
        await LoadRecipes();
    }

    private async Task SearchRecipesByDDL() => await LoadRecipes();
}
